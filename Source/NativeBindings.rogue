$api Rogue::Byte
$api Rogue::Character
$api Rogue::Int
$api Rogue::Int32
$api Rogue::Int64
$api Rogue::Logical
$api Rogue::Real
$api Rogue::Real32
$api Rogue::Real64
$api Rogue::Object
$api Rogue::String
$api Rogue::Random

library RogueScript

class NativeBindings [singleton]
  METHODS
    method register( vm:VM )
      vm.register_native_type( <<Rogue::Byte>>,
        NativeTypeInfo(
          &instance_of = (value) => value.is_byte,
          &variant_type = Variant.TYPE_BYTE,
          &attributes = Attribute.PRIMITIVE
        )
      )
      vm.register_definition( "Rogue::Byte.MAXIMUM", Byte.MAXIMUM->String )
      vm.register_definition( "Rogue::Byte.MINIMUM", Byte.MINIMUM->String )
      vm.register_native_method_default_arg( "Rogue::Byte", "to<<Rogue::String>>(Rogue::Int,Rogue::Logical,Rogue::Logical,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::Byte", "to<<Rogue::String>>(Rogue::Int,Rogue::Logical,Rogue::Logical,Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::Byte", "to<<Rogue::String>>(Rogue::Int,Rogue::Logical,Rogue::Logical,Rogue::Logical)", 4, "false" )

      vm.register_native_type( <<Rogue::Character>>,
        NativeTypeInfo(
          &instance_of = (value) => value.is_character,
          &variant_type = Variant.TYPE_CHARACTER,
          &attributes = Attribute.PRIMITIVE
        )
      )
      vm.register_native_method_default_arg( "Rogue::Character", "equals(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::Character", "to<<Rogue::String>>(Rogue::Int,Rogue::Logical,Rogue::Logical,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::Character", "to<<Rogue::String>>(Rogue::Int,Rogue::Logical,Rogue::Logical,Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::Character", "to<<Rogue::String>>(Rogue::Int,Rogue::Logical,Rogue::Logical,Rogue::Logical)", 4, "false" )

      vm.register_native_type( <<Rogue::Int>>,
        NativeTypeInfo(
          &instance_of = (value) => value.is_int,
          &variant_type = Variant.TYPE_INT,
          &attributes = Attribute.PRIMITIVE
        )
      )
      vm.register_definition( "Rogue::Int.BITS",    Int.BITS->String )
      vm.register_definition( "Rogue::Int.MAXIMUM", Int.MAXIMUM->String )
      vm.register_definition( "Rogue::Int.MINIMUM", Int.MINIMUM->String )
      vm.register_native_method_default_arg( "Rogue::Int", "to<<Rogue::String>>(Rogue::Int,Rogue::Logical,Rogue::Logical,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::Int", "to<<Rogue::String>>(Rogue::Int,Rogue::Logical,Rogue::Logical,Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::Int", "to<<Rogue::String>>(Rogue::Int,Rogue::Logical,Rogue::Logical,Rogue::Logical)", 4, "false" )
      vm.register_native_method_default_arg( "Rogue::Int", "to_digit(Rogue::Logical)", 1, "false" )

      vm.register_native_type( <<Rogue::Int32>>,
        NativeTypeInfo(
          &instance_of = (value) => value.is_int32,
          &variant_type = Variant.TYPE_INT32,
          &attributes = Attribute.PRIMITIVE
        )
      )
      vm.register_definition( "Rogue::Int32.MAXIMUM", Int32.MAXIMUM->String )
      vm.register_definition( "Rogue::Int32.MINIMUM", Int32.MINIMUM->String )
      vm.register_native_method_default_arg( "Rogue::Int32", "to<<Rogue::String>>(Rogue::Int,Rogue::Logical,Rogue::Logical,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::Int32", "to<<Rogue::String>>(Rogue::Int,Rogue::Logical,Rogue::Logical,Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::Int32", "to<<Rogue::String>>(Rogue::Int,Rogue::Logical,Rogue::Logical,Rogue::Logical)", 4, "false" )
      vm.register_native_method_default_arg( "Rogue::Int32", "to_digit(Rogue::Logical)", 1, "false" )

      vm.register_native_type( <<Rogue::Int64>>,
        NativeTypeInfo(
          &instance_of = (value) => value.is_int64,
          &variant_type = Variant.TYPE_INT64,
          &attributes = Attribute.PRIMITIVE
        )
      )
      vm.register_definition( "Rogue::Int64.MAXIMUM", Int64.MAXIMUM->String )
      vm.register_definition( "Rogue::Int64.MINIMUM", Int64.MINIMUM->String )
      vm.register_native_method_default_arg( "Rogue::Int64", "to<<Rogue::String>>(Rogue::Int,Rogue::Logical,Rogue::Logical,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::Int64", "to<<Rogue::String>>(Rogue::Int,Rogue::Logical,Rogue::Logical,Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::Int64", "to<<Rogue::String>>(Rogue::Int,Rogue::Logical,Rogue::Logical,Rogue::Logical)", 4, "false" )
      vm.register_native_method_default_arg( "Rogue::Int64", "to_digit(Rogue::Logical)", 1, "false" )

      vm.register_native_type( <<Rogue::Logical>>,
        NativeTypeInfo(
          &instance_of = (value) => value.is_logical,
          &variant_type = Variant.TYPE_LOGICAL,
          &attributes = Attribute.PRIMITIVE
        )
      )

      vm.register_native_type( <<Rogue::Real>>,
        NativeTypeInfo(
          &instance_of = (value) => value.is_real,
          &variant_type = Variant.TYPE_REAL,
          &attributes = Attribute.PRIMITIVE
        )
      )
      vm.register_definition( "Rogue::Real.BITS",   Real.BITS->String )
      vm.register_definition( "Rogue::Int.MAXIMUM", Int.MAXIMUM->String )
      vm.register_definition( "Rogue::Int.MINIMUM", Int.MINIMUM->String )

      vm.register_native_type( <<Rogue::Real32>>,
        NativeTypeInfo(
          &instance_of = (value) => value.is_real32,
          &variant_type = Variant.TYPE_REAL32,
          &attributes = Attribute.PRIMITIVE
        )
      )

      vm.register_native_type( <<Rogue::Real64>>,
        NativeTypeInfo(
          &instance_of = (value) => value.is_real64,
          &variant_type = Variant.TYPE_REAL64,
          &attributes = Attribute.PRIMITIVE
        )
      )

      vm.register_native_type( <<Rogue::Object>> )
      vm.register_native_method_default_arg( "Rogue::Object", "write_json(Rogue::String,Rogue::Logical,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::Object", "write_json(Rogue::String,Rogue::Logical,Rogue::Logical)", 3, "false" )
      vm.register_extensible_type( "Rogue::Object", (rs_type)=>Rogue::RogueScriptObject(rs_type) )
      vm.register_native_method_slot( "Rogue::Object", 0, "description()" )
      vm.register_native_method_slot( "Rogue::Object", 1, "hashcode()" )
      vm.register_native_method_slot( "Rogue::Object", 2, "object_id()" )
      vm.register_native_method_slot( "Rogue::Object", 3, "operator==(Rogue::Object)" )
      vm.register_native_method_slot( "Rogue::Object", 4, "print_to(Rogue::PrintWriter)" )
      vm.register_native_method_slot( "Rogue::Object", 5, "to<<Rogue::String>>()" )
      vm.register_native_method_slot( "Rogue::Object", 6, "write_json(Rogue::String,Rogue::Logical,Rogue::Logical)" )

      vm.register_native_type( <<Rogue::String>> )
      vm.register_native_method_default_arg( "Rogue::String", "write_json(Rogue::String,Rogue::Logical,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "write_json(Rogue::String,Rogue::Logical,Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "after_any(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "after_any(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "after_first(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "after_first(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "after_last(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "after_last(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "after_prefix(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "after_prefix(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "before_first(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "before_first(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "before_last(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "before_last(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "before_suffix(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "before_suffix(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "begins_with(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "begins_with(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "clipped(Rogue::Int,Rogue::Int)", 1, "0" )
      vm.register_native_method_default_arg( "Rogue::String", "clipped(Rogue::Int,Rogue::Int)", 2, "0" )
      vm.register_native_method_default_arg( "Rogue::String", "compare_to(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "contains(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "contains(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "contains_at(Rogue::String,Rogue::Int,Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "contains_pattern(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "ends_with(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "ends_with(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "equals(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "extract_string(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "extract_strings(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "extract_strings(Rogue::String,Rogue::String[],Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "from_first(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "from_first(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "from_last(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "from_last(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "locate(Rogue::Character,Rogue::Int?,Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "locate(Rogue::String,Rogue::Int?,Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "locate_last(Rogue::Character,Rogue::Int?,Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "locate_last(Rogue::String,Rogue::Int?,Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "locate_nth(Rogue::Character,Rogue::Int,Rogue::Int?,Rogue::Logical)", 4, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "locate_nth(Rogue::String,Rogue::Int,Rogue::Int?,Rogue::Logical)", 4, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "locate_nth_last(Rogue::Character,Rogue::Int,Rogue::Int?,Rogue::Logical)", 4, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "locate_nth_last(Rogue::String,Rogue::Int,Rogue::Int?,Rogue::Logical)", 4, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "locate_pattern(Rogue::String,Rogue::Int,Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "matches_pattern(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "replacing(Rogue::Character,Rogue::Character,Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "replacing(Rogue::Character,Rogue::String,Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "replacing(Rogue::String,Rogue::String,Rogue::Logical)", 3, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "split(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "split(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "up_to_first(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "up_to_first(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "up_to_last(Rogue::Character,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "up_to_last(Rogue::String,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "_extract_strings(Rogue::Int,Rogue::Int,Rogue::String,Rogue::Int,Rogue::Int,Rogue::String[],Rogue::Logical)", 7, "false" )
      vm.register_native_method_default_arg( "Rogue::String", "_pattern_match_count(Rogue::Int,Rogue::Int,Rogue::String,Rogue::Int,Rogue::Int,Rogue::Logical)", 6, "false" )

      vm.register_native_type( <<Rogue::Random>> )
      vm.register_native_method_default_arg( "Rogue::Random", "write_json(Rogue::String,Rogue::Logical,Rogue::Logical)", 2, "false" )
      vm.register_native_method_default_arg( "Rogue::Random", "write_json(Rogue::String,Rogue::Logical,Rogue::Logical)", 3, "false" )

endClass

library Rogue

class RogueScriptObject : Object, RogueScript::RogueScriptAdapted [api]
  METHODS
    method description()->Rogue::String [override]
      if local m = rs_type.native_method_overrides[0]
        return m( this )
      else
        return prior.description()
      endIf

    method hashcode()->Rogue::Int [override]
      if local m = rs_type.native_method_overrides[1]
        return m( this )
      else
        return prior.hashcode()
      endIf

    method object_id()->Rogue::Int64 [override]
      if local m = rs_type.native_method_overrides[2]
        return m( this )
      else
        return prior.object_id()
      endIf

    method operator==( other:Rogue::Object )->Rogue::Logical [override]
      if local m = rs_type.native_method_overrides[3]
        return m( this, other )
      else
        return prior.operator==( other )
      endIf

    method print_to( buffer:Rogue::PrintWriter ) [override]
      if local m = rs_type.native_method_overrides[4]
        m( this, buffer )
      else
        prior.print_to( buffer )
      endIf

    method to<<Rogue::String>>()->Rogue::String [override]
      if local m = rs_type.native_method_overrides[5]
        return m( this )
      else
        return prior.to<<Rogue::String>>()
      endIf

    method write_json( builder:Rogue::String, formatted:Rogue::Logical, omit_commas:Rogue::Logical ) [override]
      if local m = rs_type.native_method_overrides[6]
        m( this, builder, formatted, omit_commas )
      else
        prior.write_json( builder, formatted, omit_commas )
      endIf

endClass


library RogueScript

enum Attribute [bitflags]
  CATEGORIES
    ASPECT
    COMPOUND
    ENUM
    OBJECT
    PRIMITIVE

    ABSTRACT
    APPEND
    BITFLAGS
    ESSENTIAL
    EXPORT
    INSERT
    OVERRIDE
    PREFERRED
    PROPAGATED
    REPLACE
    SINGLETON

    IS_GLOBAL
    REQUIRES_CLEANUP
    IS_NATIVE
    IS_NATIVE_FUNCTION

    NO_INCLUDE

  DEFINITIONS
    CLASSIFICATION = Attribute[PRIMITIVE,COMPOUND,ENUM,OBJECT,ASPECT]
endEnum

$localMacro ROGUE_SCRIPT_ATTRIBUTE<<$name, $value>>
  METHODS
    method $name->Logical
      return (flags & ($value)).value

    method $id(set_,$name)( setting:Logical )
      if (setting) flags |= ($value)
      else         flags &= !($value)
$endLocalMacro

class Attributes : CmdList
  ROGUE_SCRIPT_ATTRIBUTE<< is_primitive,         Attribute.PRIMITIVE >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_compound,          Attribute.COMPOUND >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_enum,              Attribute.ENUM >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_object,            Attribute.OBJECT >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_aspect,            Attribute.ASPECT >>
  ROGUE_SCRIPT_ATTRIBUTE<< classification,       Attribute.CLASSIFICATION >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_exported,          Attribute.EXPORT >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_essential,         Attribute.ESSENTIAL >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_singleton,         Attribute.SINGLETON >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_insert,            Attribute.INSERT >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_append,            Attribute.APPEND >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_replace,           Attribute.REPLACE >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_global,            Attribute.IS_GLOBAL >>
  ROGUE_SCRIPT_ATTRIBUTE<< requires_cleanup,     Attribute.REQUIRES_CLEANUP >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_abstract,          Attribute.ABSTRACT >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_propagated,        Attribute.PROPAGATED >>
  ROGUE_SCRIPT_ATTRIBUTE<< bitflags,             Attribute.BITFLAGS >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_override,          Attribute.OVERRIDE >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_preferred,         Attribute.PREFERRED >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_native,            Attribute.IS_NATIVE >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_native_function,   Attribute.IS_NATIVE_FUNCTION >>
  ROGUE_SCRIPT_ATTRIBUTE<< is_no_include,        Attribute.NO_INCLUDE >>

  PROPERTIES
    flags : Attribute

  METHODS
    method init( t )

    method init( t, flags )

    method init( other:Attributes )
      t = other.t
      flags = other.flags

    method add( cmd:Cmd )
      flags |= cmd.attribute_flags

    method add( flags:Int64 )
      this.flags |= flags

    method contains( flags:Int64 )->Logical
      return (flags & flags)?

    method contains( value:String )->Logical
      if ((forEach in this)->String == value) return true
      return false

    method description->String
      return "Attributes($)"(flags) + list_description

    method is_reference->Logical
      return (flags & (Attribute.OBJECT | Attribute.ASPECT))?
endClass

augment
  METHODS
    method Cmd.attribute_flags->Attribute
      return Attribute(0)

    method AttributeAbstract.attribute_flags->Attribute
      return Attribute.ABSTRACT

    method AttributeAppend.attribute_flags->Attribute
      return Attribute.APPEND

    method AttributeAspect.attribute_flags->Attribute
      return Attribute.ASPECT

    method AttributeBitflags.attribute_flags->Attribute
      return Attribute.BITFLAGS

    method AttributeCompound.attribute_flags->Attribute
      return Attribute.COMPOUND

    method AttributeEssential.attribute_flags->Attribute
      return Attribute.ESSENTIAL

    method AttributeExport.attribute_flags->Attribute
      return Attribute.EXPORT

    method AttributeInsert.attribute_flags->Attribute
      return Attribute.INSERT

    method AttributeNative.attribute_flags->Attribute
      return Attribute.IS_NATIVE

    method AttributeNoInclude.attribute_flags->Attribute
      return Attribute.NO_INCLUDE

    method AttributeOverride.attribute_flags->Attribute
      return Attribute.OVERRIDE

    method AttributePreferred.attribute_flags->Attribute
      return Attribute.PREFERRED

    method AttributePrimitive.attribute_flags->Attribute
      return Attribute.PRIMITIVE

    method AttributePropagated.attribute_flags->Attribute
      return Attribute.PROPAGATED

    method AttributeReplace.attribute_flags->Attribute
      return Attribute.REPLACE

    method AttributeSingleton.attribute_flags->Attribute
      return Attribute.SINGLETON
endAugment


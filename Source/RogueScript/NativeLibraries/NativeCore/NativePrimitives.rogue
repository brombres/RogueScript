library RogueScript

class NativePrimitives [singleton]
  METHODS
    method register( vm:VM )
      #{
      # Byte
      vm.register_type( "Rogue::Byte",
        NativeTypeInfo( &instance_of=(value)=>value.is_byte, &variant_type=Variant.TYPE_BYTE ) )

      # Character
      vm.register_type( "Rogue::Character",
        NativeTypeInfo( &instance_of=(value)=>value.is_character, &variant_type=Variant.TYPE_CHARACTER ) )

      # Int
      vm.register_definition( "Rogue::Int.BITS", Int.BITS->String )
      vm.register_global_method( "Rogue::Int.MAXIMUM", () => Int.MAXIMUM )
      vm.register_global_method( "Rogue::Int.MINIMUM", () => Int.MINIMUM )
      vm.register_method( "Rogue::Int.format(String)", () => VM.context->Int.format(VM.string(1)) )

      # Int32
      vm.register_type( "Rogue::Int32",
        NativeTypeInfo( &instance_of=(value)=>value.is_int32, &variant_type=Variant.TYPE_INT32 ) )

      # Int64
      vm.register_type( "Rogue::Int64",
        NativeTypeInfo( &instance_of=(value)=>value.is_int64, &variant_type=Variant.TYPE_INT64 ) )

      # Logical
      vm.register_type( "Rogue::Logical",
        NativeTypeInfo( &instance_of=(value)=>value.is_logical, &variant_type=Variant.TYPE_LOGICAL ) )

      # Real
      vm.register_type( "Rogue::Real",
        NativeTypeInfo( &instance_of=(value)=>value.is_real, &variant_type=Variant.TYPE_REAL ) )

      # Real32
      vm.register_type( "Rogue::Real32",
        NativeTypeInfo( &instance_of=(value)=>value.is_real32, &variant_type=Variant.TYPE_REAL32 ) )

      # Real64
      vm.register_type( "Rogue::Real64",
        NativeTypeInfo( &instance_of=(value)=>value.is_real64, &variant_type=Variant.TYPE_REAL64 ) )
      }#

endClass

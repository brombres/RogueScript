library RogueScript

# Generated by Froley. WARNING: WILL BE OVERWRITTEN.
$define PARSER_EXISTS true

$include "Cmd.rogue"
$include "Scanner.rogue"
$include "Visitor.rogue"

class ParserCore [abstract]
  DEFINITIONS
    ip_program_elements = 0
    ip_consume_eols = 1
    ip_must_consume_eols = 2
    ip_consume_eols_and_semicolons = 3
    ip_program_element = 4
    ip_id_filepath = 5
    ip_parse_library_id = 6
    ip_subclass = 7
    ip_procedure_attributes = 8
    ip_procedure_attribute = 9
    ip_procedure_body = 10
    ip_procedure_name = 11
    ip_procedure_parameters = 12
    ip_procedure_parameter = 13
    ip_optional_initial_value = 14
    ip_optional_parameter_initial_value = 15
    ip_procedure_return_type = 16
    ip_procedure_doc_comment_and_statements = 17
    ip_function_definition = 18
    ip_with_values = 19
    ip_with_value = 20
    ip_id_or_type = 21
    ip_type = 22
    ip_remaining_type = 23
    ip_list_or_optional_type = 24
    ip_function_param_types = 25
    ip_function_type_parameter = 26
    ip_function_return_type = 27
    ip_scoped_name = 28
    ip_optional_type = 29
    ip_identifier = 30
    ip_string = 31
    ip_module_attributes = 32
    ip_module_attribute = 33
    ip_class_attributes = 34
    ip_class_attribute = 35
    ip_class = 36
    ip_enum_attributes = 37
    ip_enum_attribute = 38
    ip_enum = 39
    ip_placeholder = 40
    ip_constructor_properties = 41
    ip_base_types = 42
    ip_class_sections = 43
    ip_class_section = 44
    ip_state = 45
    ip_enum_sections = 46
    ip_enum_section = 47
    ip_categories = 48
    ip_category = 49
    ip_native_code_blocks = 50
    ip_native_code_block = 51
    ip_definition = 52
    ip_forEach_loop = 53
    ip_forEach_assignable_expression = 54
    ip_forEach_collection = 55
    ip_forEach_body = 56
    ip_inline_forEach = 57
    ip_if_statement = 58
    ip_if_local_elseifs_or_else = 59
    ip_if_statement_multi_line_elseIf_else = 60
    ip_if_statement_single_line_elseIf_else = 61
    ip_inline_which = 62
    ip_inline_which_case = 63
    ip_method = 64
    ip_scoped_single_line_statements = 65
    ip_scoped_multi_line_statements = 66
    ip_global_method = 67
    ip_global_properties = 68
    ip_properties = 69
    ip_property_declaration = 70
    ip_global_property_attributes = 71
    ip_global_property_attribute = 72
    ip_property_attributes = 73
    ip_property_attribute = 74
    ip_multi_line_statements = 75
    ip_single_line_statements = 76
    ip_control_structure = 77
    ip_optional_args = 78
    ip_args = 79
    ip_arg = 80
    ip_arg_inner = 81
    ip_statement = 82
    ip_verbose_trace = 83
    ip_brief_trace = 84
    ip_local_declarations = 85
    ip_local_declaration = 86
    ip_localize = 87
    ip_localize_declaration = 88
    ip_block = 89
    ip_block_assignment = 90
    ip_contingent = 91
    ip_loop = 92
    ip_which_conditional = 93
    ip_while_loop = 94
    ip_try_catch = 95
    ip_catches = 96
    ip_catch_clause = 97
    ip_temporarily = 98
    ip_temporary_assignment = 99
    ip_use = 100
    ip_used_resource = 101
    ip_module_path = 102
    ip_uses_attributes = 103
    ip_uses_attribute = 104
    ip_access_args = 105
    ip_optional_expression = 106
    ip_expression = 107
    ip_logical_xor = 108
    ip_logical_xor__inner = 109
    ip_logical_or = 110
    ip_logical_or__inner = 111
    ip_logical_and = 112
    ip_logical_and__inner = 113
    ip_comparison = 114
    ip_comparison__inner = 115
    ip_reference_comparison = 116
    ip_range = 117
    ip_bitwise_xor = 118
    ip_bitwise_xor__inner = 119
    ip_bitwise_or = 120
    ip_bitwise_or__inner = 121
    ip_bitwise_and = 122
    ip_bitwise_and__inner = 123
    ip_add_subtract = 124
    ip_add_subtract__inner = 125
    ip_bitwise_shift = 126
    ip_bitwise_shift__inner = 127
    ip_multiply_divide_mod = 128
    ip_multiply_divide_mod__inner = 129
    ip_power = 130
    ip_power__inner = 131
    ip_pre_unary = 132
    ip_post_unary = 133
    ip_post_unary__inner = 134
    ip_access = 135
    ip_access_inner = 136
    ip_context_block = 137
    ip_member_access = 138
    ip_context_block_command = 139
    ip_term = 140
    ip_create_InvokeContext = 141
    ip_variant_expression = 142
    ip_variant_list = 143
    ip_variant_table = 144
    ip_variant_key_value_pair = 145
    ip_type_access_or_typed_literal_list = 146
    ip_remaining_generic_function_definition = 147
    ip_native_code = 148
    ip_literal_list = 149
    ip_remaining_typed_literal_list = 150
    ip_literal_table = 151
    ip_literal_table_entry = 152
    ip_preprocess = 153
    ip_process_another = 154
    ip_include_attributes = 155
    ip_include_attribute = 156
    ip_meta_expression = 157
    ip_meta_term = 158
    ip_collect_meta_filepath = 159
    ip_native_constructor_signature = 160
    ip_native_method_signature = 161
    ip_native_method_parameters = 162
    ip_native_method_parameter = 163
    ip_optional_native_parameter_default_value = 164
    ip_additional_node_types = 165

  PROPERTIES
    _scanner         : Scanner
    _tokens          : Token[]
    _position        : Int
    _limit           : Int
    _cmd_stack       = Cmd[]
    _list_starts     = Int[]
    _list_tokens     = Token[]
    _next_t          : Token
    _cur_t           : Token
    _saved_positions = ParserPosition[]
    start_ip         = 0
    ip               = 0
    buffer           = String()
    output           = String()

    disable_output             : Int
    is_batch_augment           : Logical
    initial_value_tokens       : Cmd
    include_attribute_api      : Logical
    include_attribute_folder   : Logical
    include_attribute_optional : Logical

  METHODS
    method init
      noAction

    method init( file:File )
      ensure<<_scanner>>()
      _scanner.reset( file )
      init( _scanner )

    method init( filepath:String, content:String )
      ensure<<_scanner>>()
      _scanner.reset( filepath, content )
      init( _scanner )

    method init( _scanner )
      local tokens = _scanner.tokenize
      if (_scanner.output.count) print _scanner.output; flush
      init( tokens )

    method init( _tokens )
      _position = 0
      _limit = _tokens.count
      _cmd_stack.clear
      output.clear

    method reset
      _position = 0
      _cmd_stack.clear
      _list_starts.clear
      _list_tokens.clear
      _saved_positions.clear
      start_ip = 0
      ip = 0
      buffer.clear
      output.clear

    method reset( file:File )
      ensure<<_scanner>>()
      _scanner.reset( file )
      reset

    method reset( filepath:String, content:String )
      ensure<<_scanner>>()
      _scanner.reset( filepath, content )
      reset( _scanner )

    method reset( _scanner )
      reset
      init( _scanner )

    method join_strings->Int [abstract]

    method join_identifiers->Int [abstract]

    method parse_doc_comment->Int [abstract]

    method has_another->Logical
      return _position < _limit

    method parse( ip=null:Int? )->Cmd
      if (_position == _limit) return null
      if (ip) start_ip = ip.value
      _list_starts.clear
      _list_tokens.clear
      _next_t = _peek
      _cur_t = _next_t
      _execute( start_ip )
      _on_output_line # flush any buffered output
      if (disable_output) return null
      if (_cmd_stack.count != 1)
        @trace _cmd_stack
        throw _peek.error( "[INTERNAL] Expected exactly one command node remaining on stack." )
      endIf
      return _cmd_stack.remove_last

    method _begin_list
      _list_starts.add( _cmd_stack.count )
      _list_tokens.add( _next_t )

    method _consume( type:TokenType )->Logical
      if (_next_t.type != type) return false
      if (_position < _limit) ++_position; _next_t = _peek
      return true

    method _consume_content( content:String )->Logical
      if (not _next_t.content or _next_t.content != content) return false
      if (_position < _limit) ++_position; _next_t = _peek
      return true

    method _consume_eols
      while (_next_t.type == TokenType.EOL)
        ++_position
        _next_t = _peek
      endWhile

    method _create_token_list( &preserve_stack )
      if (_saved_positions.is_empty)
        throw _peek.error( "[INTERNAL] createTokenList/produceTokenlist without prior savePosition." )
      endIf
      local pos = _saved_positions.remove_last
      if (not preserve_stack) _cmd_stack.discard_from( pos.cmd_stack_count )
      local i1 = pos.position
      local limit = _position
      local list = Token[]( limit - i1 )
      forEach (i in i1..<limit) list.add( _tokens[i] )
      _push( TokenList(_tokens[i1],list), 0 )

    method _describe( type:TokenType )->String
      if (type.symbol[0].is_letter) return type.symbol
      return "'$'" (type.symbol)

    method _discard_list
      if (_list_tokens.is_empty)
        throw _peek.error( "[INTERNAL] discardList without corresponding beginList." )
      endIf
      _list_starts.remove_last
      _list_tokens.remove_last

    method _discard_position
      if (_saved_positions.is_empty)
        throw _peek.error( "[INTERNAL] No savePosition to discard." )
      endIf
      _saved_positions.remove_last

    method _duplicate
      if (disable_output)
        return
      elseIf (_cmd_stack.count)
        _cmd_stack.add( _cmd_stack.last )
      else
        throw _peek.error( "[INTERNAL] Attempt to duplicate command on empty command stack." )
      endIf

    method _list_t->Token
      if (_list_tokens.is_empty)
        throw _peek.error( "[INTERNAL] createList/produceList without corresponding beginList." )
      endIf
      return _list_tokens.remove_last

    method _must_consume_content( content:String )
      if (_consume_content(content)) return
      local expected = which{ content.contains('\''):content || "'$'"(content.to_escaped_ascii) }
      local next = _describe( _peek.type )
      _throw_syntax_error( "Expected $, found $." (expected,next) )

    method _next_is( content:String )->Logical
      if (not _next_t.content or _next_t.content != content) return false
      if (_position < _limit) ++_position; _next_t = _peek
      return true

    method _on_output_line
      # Default behavior: print out 'output' and clear it. Can override this method.
      print( output )
      flush
      output.clear

    method _on_t->Token
     local result = _next_t
     ++_position
     _next_t = _peek
     return result

    method _peek->Token
      if (_position < _limit) return _tokens[ _position ]
      if (_tokens.count) return _tokens.last.cloned( TokenType.EOI )
      return Token( TokenType.EOI, null, null, 0, 0 )

    method _pop->Cmd
      if (disable_output)       return null
      elseIf (_cmd_stack.count) return _cmd_stack.remove_last
      throw _peek.error( "[INTERNAL] Attempt to pop command off empty command stack." )

    method _push( cmd:Cmd )
      if (not disable_output) _cmd_stack.add( cmd )

    method _push( cmd:Cmd, node_arg_count:Int )
      if (node_arg_count) _cmd_stack.discard_from( _cmd_stack.count - node_arg_count )
      _cmd_stack.add( cmd )

    method _push_list( list:Cmd )
      local i1 = _list_starts.remove_last
      list.add( forEach in _cmd_stack from i1 )
      _cmd_stack.discard_from( i1 )
      _cmd_stack.add( list )

    method _read->Token
      local result = _next_t
      if (_position < _limit) ++_position; _next_t = _peek
      return result

    method _restore_position
      if (_saved_positions.is_empty)
        throw _peek.error( "[INTERNAL] No savePosition to restore." )
      endIf
      local pos = _saved_positions.remove_last
      _position = pos.position
      _cmd_stack.discard_from( pos.cmd_stack_count )
      _cur_t = pos.cur_t
      _next_t = _peek

    method _save_position
      _saved_positions.add( ParserPosition(_position,_cmd_stack.count,_cur_t) )

    method _node_arg( relative:Int )->Cmd
      local i = _cmd_stack.count + relative
      if (i < 0) throw _peek.error( "[INTERNAL] Not enough nodes on stack to create new Cmd." )
      return _cmd_stack[i]

    method _logical_arg( relative:Int )->Logical
      local node = _node_arg( relative )
      if (node is null) return false
      return node->Logical

    method _character_arg( relative:Int )->Character
      local node = _node_arg( relative )
      if (node is null) return 0
      return node->Character

    method _int_arg( relative:Int )->Int
      local node = _node_arg( relative )
      if (node is null) return 0
      return node->Int

    method _real_arg( relative:Int )->Real
      local node = _node_arg( relative )
      if (node is null) return 0
      return node->Real

    method _string_arg( relative:Int )->String
      local node = _node_arg( relative )
      if (node is null) return null
      return node->String

    method _string_to_Logical( st:String )->Logical
      if (st.equals("false",&ignore_case)) return false
      return true

    method _string_to_Character( st:String )->Character
      if (st.count == 0) return Character(0)
      return st[0]

    method _string_to_Int( st:String )->Int
      return st->Int

    method _string_to_Real( st:String )->Real
      return st->Real

    method _throw_syntax_error( message=null:String, expected=null:TokenType? )
      if (message is null)
        local builder = String()
        local next = _describe( _peek.type )
        if (expected)
          builder.print "Expected $, found $." (_describe(expected.value),next)
        else
          builder.print "Unexpected $." (next)
        endIf
        message = builder
      endIf

      throw _peek.error( message )

    method _execute( ip:Int )
      which (ip)
        case ip_program_elements: r_program_elements
        case ip_consume_eols: r_consume_eols
        case ip_must_consume_eols: r_must_consume_eols
        case ip_consume_eols_and_semicolons: r_consume_eols_and_semicolons
        case ip_program_element: r_program_element
        case ip_id_filepath: r_id_filepath
        case ip_parse_library_id: r_parse_library_id
        case ip_subclass: r_subclass
        case ip_procedure_attributes: r_procedure_attributes
        case ip_procedure_attribute: r_procedure_attribute
        case ip_procedure_body: r_procedure_body
        case ip_procedure_name: r_procedure_name
        case ip_procedure_parameters: r_procedure_parameters
        case ip_procedure_parameter: r_procedure_parameter
        case ip_optional_initial_value: r_optional_initial_value
        case ip_optional_parameter_initial_value: r_optional_parameter_initial_value
        case ip_procedure_return_type: r_procedure_return_type
        case ip_procedure_doc_comment_and_statements: r_procedure_doc_comment_and_statements
        case ip_function_definition: r_function_definition
        case ip_with_values: r_with_values
        case ip_with_value: r_with_value
        case ip_id_or_type: r_id_or_type
        case ip_type: r_type
        case ip_remaining_type: r_remaining_type
        case ip_list_or_optional_type: r_list_or_optional_type
        case ip_function_param_types: r_function_param_types
        case ip_function_type_parameter: r_function_type_parameter
        case ip_function_return_type: r_function_return_type
        case ip_scoped_name: r_scoped_name
        case ip_optional_type: r_optional_type
        case ip_identifier: r_identifier
        case ip_string: r_string
        case ip_module_attributes: r_module_attributes
        case ip_module_attribute: r_module_attribute
        case ip_class_attributes: r_class_attributes
        case ip_class_attribute: r_class_attribute
        case ip_class: r_class
        case ip_enum_attributes: r_enum_attributes
        case ip_enum_attribute: r_enum_attribute
        case ip_enum: r_enum
        case ip_placeholder: r_placeholder
        case ip_constructor_properties: r_constructor_properties
        case ip_base_types: r_base_types
        case ip_class_sections: r_class_sections
        case ip_class_section: r_class_section
        case ip_state: r_state
        case ip_enum_sections: r_enum_sections
        case ip_enum_section: r_enum_section
        case ip_categories: r_categories
        case ip_category: r_category
        case ip_native_code_blocks: r_native_code_blocks
        case ip_native_code_block: r_native_code_block
        case ip_definition: r_definition
        case ip_forEach_loop: r_forEach_loop
        case ip_forEach_assignable_expression: r_forEach_assignable_expression
        case ip_forEach_collection: r_forEach_collection
        case ip_forEach_body: r_forEach_body
        case ip_inline_forEach: r_inline_forEach
        case ip_if_statement: r_if_statement
        case ip_if_local_elseifs_or_else: r_if_local_elseifs_or_else
        case ip_if_statement_multi_line_elseIf_else: r_if_statement_multi_line_elseIf_else
        case ip_if_statement_single_line_elseIf_else: r_if_statement_single_line_elseIf_else
        case ip_inline_which: r_inline_which
        case ip_inline_which_case: r_inline_which_case
        case ip_method: r_method
        case ip_scoped_single_line_statements: r_scoped_single_line_statements
        case ip_scoped_multi_line_statements: r_scoped_multi_line_statements
        case ip_global_method: r_global_method
        case ip_global_properties: r_global_properties
        case ip_properties: r_properties
        case ip_property_declaration: r_property_declaration
        case ip_global_property_attributes: r_global_property_attributes
        case ip_global_property_attribute: r_global_property_attribute
        case ip_property_attributes: r_property_attributes
        case ip_property_attribute: r_property_attribute
        case ip_multi_line_statements: r_multi_line_statements
        case ip_single_line_statements: r_single_line_statements
        case ip_control_structure: r_control_structure
        case ip_optional_args: r_optional_args
        case ip_args: r_args
        case ip_arg: r_arg
        case ip_arg_inner: r_arg_inner
        case ip_statement: r_statement
        case ip_verbose_trace: r_verbose_trace
        case ip_brief_trace: r_brief_trace
        case ip_local_declarations: r_local_declarations
        case ip_local_declaration: r_local_declaration
        case ip_localize: r_localize
        case ip_localize_declaration: r_localize_declaration
        case ip_block: r_block
        case ip_block_assignment: r_block_assignment
        case ip_contingent: r_contingent
        case ip_loop: r_loop
        case ip_which_conditional: r_which_conditional
        case ip_while_loop: r_while_loop
        case ip_try_catch: r_try_catch
        case ip_catches: r_catches
        case ip_catch_clause: r_catch_clause
        case ip_temporarily: r_temporarily
        case ip_temporary_assignment: r_temporary_assignment
        case ip_use: r_use
        case ip_used_resource: r_used_resource
        case ip_module_path: r_module_path
        case ip_uses_attributes: r_uses_attributes
        case ip_uses_attribute: r_uses_attribute
        case ip_access_args: r_access_args
        case ip_optional_expression: r_optional_expression
        case ip_expression: r_expression
        case ip_logical_xor: r_logical_xor
        case ip_logical_xor__inner: r_logical_xor__inner
        case ip_logical_or: r_logical_or
        case ip_logical_or__inner: r_logical_or__inner
        case ip_logical_and: r_logical_and
        case ip_logical_and__inner: r_logical_and__inner
        case ip_comparison: r_comparison
        case ip_comparison__inner: r_comparison__inner
        case ip_reference_comparison: r_reference_comparison
        case ip_range: r_range
        case ip_bitwise_xor: r_bitwise_xor
        case ip_bitwise_xor__inner: r_bitwise_xor__inner
        case ip_bitwise_or: r_bitwise_or
        case ip_bitwise_or__inner: r_bitwise_or__inner
        case ip_bitwise_and: r_bitwise_and
        case ip_bitwise_and__inner: r_bitwise_and__inner
        case ip_add_subtract: r_add_subtract
        case ip_add_subtract__inner: r_add_subtract__inner
        case ip_bitwise_shift: r_bitwise_shift
        case ip_bitwise_shift__inner: r_bitwise_shift__inner
        case ip_multiply_divide_mod: r_multiply_divide_mod
        case ip_multiply_divide_mod__inner: r_multiply_divide_mod__inner
        case ip_power: r_power
        case ip_power__inner: r_power__inner
        case ip_pre_unary: r_pre_unary
        case ip_post_unary: r_post_unary
        case ip_post_unary__inner: r_post_unary__inner
        case ip_access: r_access
        case ip_access_inner: r_access_inner
        case ip_context_block: r_context_block
        case ip_member_access: r_member_access
        case ip_context_block_command: r_context_block_command
        case ip_term: r_term
        case ip_create_InvokeContext: r_create_InvokeContext
        case ip_variant_expression: r_variant_expression
        case ip_variant_list: r_variant_list
        case ip_variant_table: r_variant_table
        case ip_variant_key_value_pair: r_variant_key_value_pair
        case ip_type_access_or_typed_literal_list: r_type_access_or_typed_literal_list
        case ip_remaining_generic_function_definition: r_remaining_generic_function_definition
        case ip_native_code: r_native_code
        case ip_literal_list: r_literal_list
        case ip_remaining_typed_literal_list: r_remaining_typed_literal_list
        case ip_literal_table: r_literal_table
        case ip_literal_table_entry: r_literal_table_entry
        case ip_preprocess: r_preprocess
        case ip_process_another: r_process_another
        case ip_include_attributes: r_include_attributes
        case ip_include_attribute: r_include_attribute
        case ip_meta_expression: r_meta_expression
        case ip_meta_term: r_meta_term
        case ip_collect_meta_filepath: r_collect_meta_filepath
        case ip_native_constructor_signature: r_native_constructor_signature
        case ip_native_method_signature: r_native_method_signature
        case ip_native_method_parameters: r_native_method_parameters
        case ip_native_method_parameter: r_native_method_parameter
        case ip_optional_native_parameter_default_value: r_optional_native_parameter_default_value
        case ip_additional_node_types: r_additional_node_types
        others
          return
      endWhich

    method r_program_elements->Int
      local _previous_cur_t = _cur_t
      _begin_list
      _begin_list
      if (disable_output)     _discard_list
      else                    _push_list( Attributes(_list_t) )
      if (not disable_output) _push( SetModuleContext(_cur_t,"Rogue",_node_arg(-1)->(as Attributes)), 1 )
      while ((_position < _limit))
        r_program_element
      endWhile
      if (disable_output)     _discard_list
      else                    _push_list( ProgramElements(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_consume_eols->Int
      local _previous_cur_t = _cur_t
      while (_consume(TokenType.EOL))
      endWhile
      _cur_t = _previous_cur_t
      return 0

    method r_must_consume_eols->Int
      local _previous_cur_t = _cur_t
      if ((not _consume(TokenType.EOL)))
        _throw_syntax_error("End of line expected.")
        _cur_t = _previous_cur_t
        return 0
      endIf
      while (_consume(TokenType.EOL))
      endWhile
      _cur_t = _previous_cur_t
      return 0

    method r_consume_eols_and_semicolons->Int
      local _previous_cur_t = _cur_t
      while ((_consume(TokenType.EOL) or _consume(TokenType.SYMBOL_SEMICOLON)))
      endWhile
      _cur_t = _previous_cur_t
      return 0

    method r_program_element->Int
      local _previous_cur_t = _cur_t
      r_consume_eols
      if ((not (_position < _limit)))
        _cur_t = _previous_cur_t
        return 0
      endIf
      if (_next_t.type == TokenType.META_INCLUDE)
        temporarily _cur_t = _on_t
          if ((_next_t.type == TokenType.STRING))
            r_string
            if (not disable_output) _push( Include(_cur_t,_string_arg(-1)), 1 )
            _cur_t = _previous_cur_t
            return 0
          elseIf ((_next_t.type == TokenType.IDENTIFIER))
            r_id_filepath
            if (not disable_output) _push( Include(_cur_t,_string_arg(-1)), 1 )
            _cur_t = _previous_cur_t
            return 0
          else
            _throw_syntax_error("Filepath string or ID expected.")
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      endIf
      if ((_next_t.type == TokenType.KEYWORD_CLASS))
        r_class
        _cur_t = _previous_cur_t
        return 0
      endIf
      if ((_next_t.type == TokenType.KEYWORD_ENUM))
        _consume(TokenType.KEYWORD_ENUM)
        r_identifier
        r_enum
        _cur_t = _previous_cur_t
        return 0
      endIf
      if (_next_t.type == TokenType.KEYWORD_AUGMENT)
        temporarily _cur_t = _on_t
          if (_consume(TokenType.EOL))
            ++disable_output
            is_batch_augment = true
            r_class_sections
            is_batch_augment = false
            if (not _consume(TokenType.KEYWORD_END_AUGMENT)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_AUGMENT )
            --disable_output
          else
            ++disable_output
            _save_position
            r_type
            _discard_position
            _save_position
            if ((_next_t.type == TokenType.SYMBOL_COLON))
              r_base_types
            endIf
            r_must_consume_eols
            r_class_sections
            if (not _consume(TokenType.KEYWORD_END_AUGMENT)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_AUGMENT )
            _discard_position
            --disable_output
          endIf
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_MODULE)
        temporarily _cur_t = _on_t
          r_parse_library_id
          r_module_attributes
          if (not disable_output) _push( SetModuleContext(_cur_t,_string_arg(-2),_node_arg(-1)->(as Attributes)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_NATIVE_TYPE)
        temporarily _cur_t = _on_t
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if ((_next_t.type == TokenType.KEYWORD_CLASS))
        _consume(TokenType.KEYWORD_CLASS)
        r_identifier
        r_class
        _cur_t = _previous_cur_t
        return 0
      endIf
      if ((_next_t.type == TokenType.KEYWORD_ROUTINE))
        _consume(TokenType.KEYWORD_ROUTINE)
        r_procedure_name
        r_procedure_parameters
        r_procedure_return_type
        r_procedure_attributes
        if (_consume(TokenType.SYMBOL_COLON))
          r_single_line_statements
        else
          r_multi_line_statements
          if (not _consume(TokenType.KEYWORD_END_ROUTINE)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_ROUTINE )
        endIf
        if (not disable_output) _push( RoutineDef(_cur_t,_string_arg(-5),_node_arg(-4)->(as Parameters),_node_arg(-3)->(as Type),_node_arg(-2)->(as Attributes),_node_arg(-1)->(as Statements)), 5 )
        _cur_t = _previous_cur_t
        return 0
      endIf
      if (_next_t.type == TokenType.KEYWORD_USES)
        temporarily _cur_t = _on_t
          r_id_filepath
          r_uses_attributes
          if (not disable_output) _push( Uses(_cur_t,_string_arg(-2),_node_arg(-1)->(as Attributes)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if ((_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?)
        _throw_syntax_error
        _cur_t = _previous_cur_t
        return 0
      endIf
      r_multi_line_statements
      _cur_t = _previous_cur_t
      return 0

    method r_id_filepath->Int
      local _previous_cur_t = _cur_t
      r_identifier
      if (_next_t.type == TokenType.SYMBOL_SLASH)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralString(_cur_t,"/"), 0 )
          join_strings

          r_id_filepath
          join_strings

        endTemporarily
      elseIf (_next_t.type == TokenType.SYMBOL_PERIOD)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralString(_cur_t,"."), 0 )
          join_strings

          r_id_filepath
          join_strings

        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_parse_library_id->Int
      local _previous_cur_t = _cur_t
      if ((_next_t.type == TokenType.SYMBOL_COLON_COLON))
        if (_next_t.type == TokenType.SYMBOL_COLON_COLON)
          temporarily _cur_t = _on_t
            if ((_next_t.type == TokenType.IDENTIFIER))
              if (not disable_output) _push( Identifier(_cur_t,"Rogue::"), 0 )
              r_identifier
              join_identifiers

            else
              if (not disable_output) _push( Identifier(_cur_t,"Rogue"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endIf
          endTemporarily
        endIf
      elseIf ((_next_t.type == TokenType.IDENTIFIER))
        r_identifier
      else
        if (not disable_output) _push( Identifier(_cur_t,"Rogue"), 0 )
        _cur_t = _previous_cur_t
        return 0
      endIf
      while (_consume(TokenType.SYMBOL_COLON_COLON))
        if (not disable_output) _push( Identifier(_cur_t,"::"), 0 )
        join_identifiers

        r_identifier
        join_identifiers

      endWhile
      _cur_t = _previous_cur_t
      return 0

    method r_subclass->Int
      local _previous_cur_t = _cur_t
      if ((_next_t.type == TokenType.KEYWORD_SUBCLASS))
        _consume(TokenType.KEYWORD_SUBCLASS)
        r_class_sections
        if (not _consume(TokenType.KEYWORD_END_SUBCLASS)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_SUBCLASS )
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_procedure_attributes->Int
      local _previous_cur_t = _cur_t
      _begin_list
      if (_next_t.type == TokenType.SYMBOL_OPEN_SQUARE)
        temporarily _cur_t = _on_t
          while (((_position < _limit) and (not (_next_t.type == TokenType.SYMBOL_CLOSE_SQUARE))))
            r_procedure_attribute
            _consume(TokenType.SYMBOL_COMMA)
          endWhile
          if (not _consume(TokenType.SYMBOL_CLOSE_SQUARE)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_SQUARE )
        endTemporarily
      endIf
      if (disable_output)     _discard_list
      else                    _push_list( Attributes(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_procedure_attribute->Int
      local _previous_cur_t = _cur_t
      if (_next_t.content and _next_t.content == "abstract")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributeAbstract(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "append")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributeAppend(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "essential")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributeEssential(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "insert")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributeInsert(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_NATIVE)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributeNative(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "override")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributeOverride(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "preferred")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributePreferred(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "propagated")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributePropagated(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "replace")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributeReplace(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _throw_syntax_error("Illegal procedure attribute. Expected one or more of [abstract append essential insert native override preferred propagated replace].")
      _cur_t = _previous_cur_t
      return 0

    method r_procedure_body->Int
      local _previous_cur_t = _cur_t
      r_multi_line_statements
      _cur_t = _previous_cur_t
      return 0

    method r_procedure_name->Int
      local _previous_cur_t = _cur_t
      if (_next_t.content and _next_t.content == "operator")
        temporarily _cur_t = _on_t
          if (_next_t.type == TokenType.SYMBOL_QUESTION)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator?"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_PLUS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator+"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_MINUS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator-"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_ASTERISK)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator*"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_SLASH)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator/"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_PERCENT)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator%"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_CARET)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator^"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_PLUS_PLUS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator++"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_MINUS_MINUS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator--"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_AMPERSAND)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator&"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_VERTICAL_BAR)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator|"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_TILDE)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator~"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_BANG)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator!"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_LEFT_SHIFT)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator:<<:"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_RIGHT_SHIFT)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator:>>:"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_RIGHT_SHIFT_X)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator:>>>:"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_EQ)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator=="), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_COMPARE)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator<>"), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_PLUS_EQUALS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator+="), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_MINUS_EQUALS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator-="), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_TIMES_EQUALS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator*="), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_DIVIDE_EQUALS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator/="), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_MOD_EQUALS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator%="), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_POWER_EQUALS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator^="), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_BITWISE_AND_EQUALS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator&="), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_BITWISE_OR_EQUALS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator|="), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_BITWISE_XOR_EQUALS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator~="), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_SHIFT_LEFT_EQUALS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator:<<:="), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_SHIFT_RIGHT_EQUALS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator:>>:="), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.type == TokenType.SYMBOL_SHIFT_RIGHT_X_EQUALS)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( Identifier(_cur_t,"operator:>>>:="), 0 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
        endTemporarily
      else
        r_identifier
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_procedure_parameters->Int
      local _previous_cur_t = _cur_t
      _begin_list
      if ((not _consume(TokenType.SYMBOL_OPEN_PAREN)))
        if (disable_output)     _discard_list
        else                    _push_list( Parameters(_list_t) )
        _cur_t = _previous_cur_t
        return 0
      endIf
      r_consume_eols
      if (_consume(TokenType.SYMBOL_CLOSE_PAREN))
        if (disable_output)     _discard_list
        else                    _push_list( Parameters(_list_t) )
        _cur_t = _previous_cur_t
        return 0
      endIf
      r_consume_eols
      r_procedure_parameter
      r_consume_eols
      while (_consume(TokenType.SYMBOL_COMMA))
        r_procedure_parameter
        r_consume_eols
      endWhile
      if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
      if (disable_output)     _discard_list
      else                    _push_list( Parameters(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_procedure_parameter->Int
      local _previous_cur_t = _cur_t
      r_consume_eols
      if (_next_t.type == TokenType.SYMBOL_AMPERSAND)
        temporarily _cur_t = _on_t
          r_identifier
          r_optional_parameter_initial_value
          r_optional_type
          if (not disable_output) _push( Local(_cur_t,_string_arg(-4),_node_arg(-3),_node_arg(-2)->(as TokenList),_node_arg(-1)->(as Type),"default"), 4 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_AT)
        temporarily _cur_t = _on_t
          r_identifier
          r_optional_parameter_initial_value
          if ((_next_t.type == TokenType.SYMBOL_COLON))
            _throw_syntax_error("Direct @property-set parameter cannot specify a type.")
            _cur_t = _previous_cur_t
            return 0
          endIf
          if (not disable_output) _push( null, 0 )
          if (not disable_output) _push( Local(_cur_t,_string_arg(-4),_node_arg(-3),_node_arg(-2)->(as TokenList),_node_arg(-1)->(as Type),"direct-auto-store"), 4 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.IDENTIFIER)
        temporarily _cur_t = _next_t
          r_identifier
          r_optional_parameter_initial_value
          r_optional_type
          if (not disable_output) _push( Local(_cur_t,_string_arg(-4),_node_arg(-3),_node_arg(-2)->(as TokenList),_node_arg(-1)->(as Type)), 4 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      r_identifier
      _cur_t = _previous_cur_t
      return 0

    method r_optional_initial_value->Int
      local _previous_cur_t = _cur_t
      if (_consume(TokenType.SYMBOL_EQUALS))
        r_consume_eols
        r_expression
      else
        if (not disable_output) _push( null, 0 )
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_optional_parameter_initial_value->Int
      local _previous_cur_t = _cur_t
      if (_consume(TokenType.SYMBOL_EQUALS))
        r_consume_eols
        _save_position
        r_expression
        if (disable_output) _discard_position
        else                _create_token_list( &preserve_stack )
      else
        if (not disable_output) _push( null, 0 )
        if (not disable_output) _push( null, 0 )
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_procedure_return_type->Int
      local _previous_cur_t = _cur_t
      if ((not _consume(TokenType.SYMBOL_ARROW)))
        if (not disable_output) _push( null, 0 )
        _cur_t = _previous_cur_t
        return 0
      endIf
      r_type
      _cur_t = _previous_cur_t
      return 0

    method r_procedure_doc_comment_and_statements->Int
      local _previous_cur_t = _cur_t
      if (_consume(TokenType.EOL))
        parse_doc_comment

        r_multi_line_statements
      else
        r_single_line_statements
        parse_doc_comment

      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_function_definition->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_FUNCTION)
        temporarily _cur_t = _on_t
          r_procedure_parameters
          r_procedure_return_type
          if (_next_t.type == TokenType.KEYWORD_WITH)
            temporarily _cur_t = _next_t
              r_with_values
            endTemporarily
          else
            if (not disable_output) _push( null, 0 )
          endIf
          _consume(TokenType.SYMBOL_COLON)
          if (_consume(TokenType.EOL))
            r_multi_line_statements
            if (not _consume(TokenType.KEYWORD_END_FUNCTION)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_FUNCTION )
          else
            r_single_line_statements
          endIf
          if (not disable_output) _push( FunctionDefinition(_cur_t,_node_arg(-4)->(as Parameters),_node_arg(-3)->(as Type),_node_arg(-2)->(as WithValues),_node_arg(-1)), 4 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_with_values->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_WITH)
        temporarily _cur_t = _on_t
          _begin_list
          if (_consume(TokenType.SYMBOL_OPEN_PAREN))
            r_with_value
            while (_consume(TokenType.SYMBOL_COMMA))
              r_consume_eols
              r_with_value
            endWhile
            if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
          else
            r_with_value
            while (_consume(TokenType.SYMBOL_COMMA))
              r_consume_eols
              r_with_value
            endWhile
          endIf
          if (disable_output)     _discard_list
          else                    _push_list( WithValues(_list_t) )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_with_value->Int
      local _previous_cur_t = _cur_t
      r_identifier
      if (_next_t.type == TokenType.SYMBOL_EQUALS)
        temporarily _cur_t = _on_t
          r_expression
        endTemporarily
      else
        if (not disable_output) _push( null, 0 )
      endIf
      if (not disable_output) _push( WithValue(_cur_t,_string_arg(-2),_node_arg(-1)), 2 )
      _cur_t = _previous_cur_t
      return 0

    method r_id_or_type->Int
      local _previous_cur_t = _cur_t
      r_scoped_name
      if ((((_next_t.type == TokenType.SYMBOL_LTLT) or (_next_t.type == TokenType.SYMBOL_EMPTY_SQUARE_BRACKETS)) or (_next_t.type == TokenType.SYMBOL_QUESTION)))
        r_remaining_type
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_type->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_OPEN_PAREN)
        temporarily _cur_t = _on_t
          if (_next_t.type == TokenType.KEYWORD_FUNCTION_TYPE)
            temporarily _cur_t = _on_t
              r_function_param_types
              r_function_return_type
              if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
              if (not disable_output) _push( FunctionType(_cur_t,_node_arg(-2)->(as TypeList),_node_arg(-1)->(as Type)), 2 )
              r_list_or_optional_type
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (not _consume(TokenType.KEYWORD_FUNCTION_TYPE)) _throw_syntax_error( &expected=TokenType.KEYWORD_FUNCTION_TYPE )
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_FUNCTION_TYPE)
        temporarily _cur_t = _on_t
          r_function_param_types
          r_function_return_type
          if (not disable_output) _push( FunctionType(_cur_t,_node_arg(-2)->(as TypeList),_node_arg(-1)->(as Type)), 2 )
          r_list_or_optional_type
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      else
        r_scoped_name
        r_remaining_type
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_remaining_type->Int
      local _previous_cur_t = _cur_t
      if (not disable_output) _push( Type(_cur_t,_string_arg(-1)), 1 )
      r_list_or_optional_type
      _cur_t = _previous_cur_t
      return 0

    method r_list_or_optional_type->Int
      local _previous_cur_t = _cur_t
      while (((_next_t.type == TokenType.SYMBOL_EMPTY_SQUARE_BRACKETS) or (_next_t.type == TokenType.SYMBOL_QUESTION)))
        if (_next_t.type == TokenType.SYMBOL_EMPTY_SQUARE_BRACKETS)
          temporarily _cur_t = _on_t
            if (not disable_output) _push( Type(_cur_t,_node_arg(-1)->(as Type)), 1 )
          endTemporarily
        elseIf (_next_t.type == TokenType.SYMBOL_QUESTION)
          temporarily _cur_t = _on_t
            if (not disable_output) _push( Type(_cur_t,_node_arg(-1)->(as Type),_string_to_Logical("true")), 1 )
          endTemporarily
        endIf
      endWhile
      _cur_t = _previous_cur_t
      return 0

    method r_function_param_types->Int
      local _previous_cur_t = _cur_t
      _begin_list
      if ((_consume(TokenType.SYMBOL_OPEN_PAREN) and (not _consume(TokenType.SYMBOL_CLOSE_PAREN))))
        r_function_type_parameter
        while (_consume(TokenType.SYMBOL_COMMA))
          r_function_type_parameter
        endWhile
        if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
      endIf
      if (disable_output)     _discard_list
      else                    _push_list( TypeList(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_function_type_parameter->Int
      local _previous_cur_t = _cur_t
      if ((_next_t.type == TokenType.IDENTIFIER))
        _save_position
        r_identifier
        if (_consume(TokenType.SYMBOL_COLON))
          _discard_position
          r_type
          _cur_t = _previous_cur_t
          return 0
        endIf
        _restore_position
      endIf
      r_type
      _cur_t = _previous_cur_t
      return 0

    method r_function_return_type->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_ARROW)
        temporarily _cur_t = _on_t
          r_type
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (not disable_output) _push( null, 0 )
      _cur_t = _previous_cur_t
      return 0

    method r_scoped_name->Int
      local _previous_cur_t = _cur_t
      _save_position
      if (_next_t.type == TokenType.SYMBOL_COLON_COLON)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( Identifier(_cur_t,"Rogue"), 0 )
          r_identifier
          if (not disable_output) _push( ModuleQualifiedID(_cur_t,_node_arg(-2),_string_arg(-1)), 2 )
          _discard_position
        endTemporarily
      else
        _restore_position
        r_identifier
      endIf
      while ((_next_t.type == TokenType.SYMBOL_COLON_COLON))
        if (_next_t.type == TokenType.SYMBOL_COLON_COLON)
          temporarily _cur_t = _on_t
            r_identifier
            if (not disable_output) _push( ModuleQualifiedID(_cur_t,_node_arg(-2),_string_arg(-1)), 2 )
          endTemporarily
        endIf
      endWhile
      _cur_t = _previous_cur_t
      return 0

    method r_optional_type->Int
      local _previous_cur_t = _cur_t
      if (_consume(TokenType.SYMBOL_COLON))
        r_type
      else
        if (not disable_output) _push( null, 0 )
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_identifier->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.IDENTIFIER)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( Identifier(_cur_t,_cur_t.content), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if ((_next_t.type == TokenType.PLACEHOLDER))
        if ((not disable_output))
          _throw_syntax_error("Unrecognized $directive or $placeholder.")
          _cur_t = _previous_cur_t
          return 0
        endIf
        if (_next_t.type == TokenType.PLACEHOLDER)
          temporarily _cur_t = _on_t
            if (not disable_output) _push( Identifier(_cur_t,_cur_t.content), 0 )
            _cur_t = _previous_cur_t
            return 0
          endTemporarily
        endIf
      endIf
      if (_next_t.type == TokenType.KEYWORD_THIS_TYPE)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( Identifier(_cur_t,"ThisType"), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _throw_syntax_error("Identifier expected.")
      _cur_t = _previous_cur_t
      return 0

    method r_string->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.STRING)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
          while ((_next_t.type == TokenType.STRING))
            if (_next_t.type == TokenType.STRING)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
              endTemporarily
            endIf
          endWhile
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _throw_syntax_error("Literal string expected.")
      _cur_t = _previous_cur_t
      return 0

    method r_module_attributes->Int
      local _previous_cur_t = _cur_t
      _begin_list
      if (_next_t.type == TokenType.SYMBOL_OPEN_SQUARE)
        temporarily _cur_t = _on_t
          while (((_position < _limit) and (not (_next_t.type == TokenType.SYMBOL_CLOSE_SQUARE))))
            r_module_attribute
            _consume(TokenType.SYMBOL_COMMA)
          endWhile
          if (not _consume(TokenType.SYMBOL_CLOSE_SQUARE)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_SQUARE )
        endTemporarily
      endIf
      if (disable_output)     _discard_list
      else                    _push_list( Attributes(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_module_attribute->Int
      local _previous_cur_t = _cur_t
      if (_next_t.content and _next_t.content == "essential")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributeEssential(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _throw_syntax_error("Illegal library attribute. Expected [essential].")
      _cur_t = _previous_cur_t
      return 0

    method r_class_attributes->Int
      local _previous_cur_t = _cur_t
      _begin_list
      if (_next_t.type == TokenType.SYMBOL_OPEN_SQUARE)
        temporarily _cur_t = _on_t
          while (((_position < _limit) and (not (_next_t.type == TokenType.SYMBOL_CLOSE_SQUARE))))
            r_class_attribute
            _consume(TokenType.SYMBOL_COMMA)
          endWhile
          if (not _consume(TokenType.SYMBOL_CLOSE_SQUARE)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_SQUARE )
        endTemporarily
      endIf
      if (disable_output)     _discard_list
      else                    _push_list( Attributes(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_class_attribute->Int
      local _previous_cur_t = _cur_t
      if (_next_t.content and _next_t.content == "abstract")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributeAbstract(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "aspect")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributeAspect(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "compound")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributeCompound(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "primitive")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributePrimitive(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "singleton")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributeSingleton(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_consume_content("essential"))
        if (not disable_output) _push( AttributeEssential(_cur_t), 0 )
        _cur_t = _previous_cur_t
        return 0
      endIf
      _throw_syntax_error("Illegal class attribute. Expected one or more of [abstract aspect compound essential primitive singleton].")
      _cur_t = _previous_cur_t
      return 0

    method r_class->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_CLASS)
        temporarily _cur_t = _on_t
          r_identifier
          r_constructor_properties
          r_base_types
          r_class_attributes
          parse_doc_comment

          if (_consume(TokenType.SYMBOL_SEMICOLON))
            if (not disable_output) _push( null, 0 )
          else
            r_class_sections
            if (not _consume(TokenType.KEYWORD_END_CLASS)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_CLASS )
          endIf
          if (not disable_output) _push( Class(_cur_t,_node_arg(-6)->(as Identifier),_node_arg(-5)->(as Parameters),_node_arg(-4)->(as TypeList),_node_arg(-3)->(as Attributes),_string_arg(-2),_node_arg(-1)), 6 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_enum_attributes->Int
      local _previous_cur_t = _cur_t
      _begin_list
      if (_next_t.type == TokenType.SYMBOL_OPEN_SQUARE)
        temporarily _cur_t = _on_t
          while (((_position < _limit) and (not (_next_t.type == TokenType.SYMBOL_CLOSE_SQUARE))))
            r_enum_attribute
            _consume(TokenType.SYMBOL_COMMA)
          endWhile
          if (not _consume(TokenType.SYMBOL_CLOSE_SQUARE)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_SQUARE )
        endTemporarily
      endIf
      if (disable_output)     _discard_list
      else                    _push_list( Attributes(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_enum_attribute->Int
      local _previous_cur_t = _cur_t
      if (_next_t.content and _next_t.content == "bitflags")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributeBitflags(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _throw_syntax_error("Illegal enum attribute. Expected [bitflags].")
      _cur_t = _previous_cur_t
      return 0

    method r_enum->Int
      local _previous_cur_t = _cur_t
      r_constructor_properties
      r_base_types
      r_enum_attributes
      parse_doc_comment

      if (_consume(TokenType.SYMBOL_SEMICOLON))
        if (not disable_output) _push( null, 0 )
      else
        r_enum_sections
        if (not _consume(TokenType.KEYWORD_END_ENUM)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_ENUM )
      endIf
      if (not disable_output) _push( Class(_cur_t,_node_arg(-6)->(as Identifier),_node_arg(-5)->(as Parameters),_node_arg(-4)->(as TypeList),_node_arg(-3)->(as Attributes),_string_arg(-2),_node_arg(-1)), 6 )
      _cur_t = _previous_cur_t
      return 0

    method r_placeholder->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.PLACEHOLDER)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( Placeholder(_cur_t,_cur_t.content), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _throw_syntax_error("'$Placeholder' name expected.")
      _cur_t = _previous_cur_t
      return 0

    method r_constructor_properties->Int
      local _previous_cur_t = _cur_t
      if ((not (_next_t.type == TokenType.SYMBOL_OPEN_PAREN)))
        if (not disable_output) _push( null, 0 )
        _cur_t = _previous_cur_t
        return 0
      endIf
      r_procedure_parameters
      _cur_t = _previous_cur_t
      return 0

    method r_base_types->Int
      local _previous_cur_t = _cur_t
      _begin_list
      if ((not _consume(TokenType.SYMBOL_COLON)))
        if (disable_output)     _discard_list
        else                    _push_list( TypeList(_list_t) )
        _cur_t = _previous_cur_t
        return 0
      endIf
      r_type
      while (((_position < _limit) and ((_next_t.type == TokenType.SYMBOL_COMMA) or (_next_t.type == TokenType.IDENTIFIER))))
        if (_consume(TokenType.SYMBOL_COMMA))
          r_consume_eols
        endIf
        r_type
      endWhile
      if (disable_output)     _discard_list
      else                    _push_list( TypeList(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_class_sections->Int
      local _previous_cur_t = _cur_t
      _begin_list
      if ((not _consume(TokenType.SYMBOL_SEMICOLON)))
        r_consume_eols
        while ((((not (_next_t.type == TokenType.KEYWORD_END_CLASS)) and (not (_next_t.type == TokenType.KEYWORD_END_AUGMENT))) and (not (_next_t.type == TokenType.KEYWORD_END_SUBCLASS))))
          r_class_section
          r_consume_eols
        endWhile
      endIf
      if (disable_output)     _discard_list
      else                    _push_list( CmdList(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_class_section->Int
      local _previous_cur_t = _cur_t
      r_consume_eols
      if (_next_t.type == TokenType.KEYWORD_GLOBAL_METHODS)
        temporarily _cur_t = _on_t
          r_consume_eols
          while ((_next_t.type == TokenType.KEYWORD_METHOD))
            r_global_method
            r_consume_eols
          endWhile
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_METHODS)
        temporarily _cur_t = _on_t
          r_consume_eols
          while ((_next_t.type == TokenType.KEYWORD_METHOD))
            r_method
            r_consume_eols
          endWhile
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_GLOBAL_PROPERTIES)
        temporarily _cur_t = _on_t
          r_consume_eols
          while ((not (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?))
            r_global_properties
            r_consume_eols
          endWhile
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_PROPERTIES)
        temporarily _cur_t = _on_t
          r_consume_eols
          while ((not (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?))
            r_properties
            r_consume_eols
          endWhile
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_NATIVE_SECTION)
        temporarily _cur_t = _on_t
          r_consume_eols
          while ((not (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?))
            r_native_code_blocks
            r_consume_eols
          endWhile
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_DEFINITIONS)
        temporarily _cur_t = _on_t
          r_consume_eols
          while ((not (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?))
            r_definition
            r_consume_eols
          endWhile
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_STATES)
        temporarily _cur_t = _on_t
          r_consume_eols
          while ((_next_t.type == TokenType.SYMBOL_GT))
            r_state
            r_consume_eols
          endWhile
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _throw_syntax_error
      _cur_t = _previous_cur_t
      return 0

    method r_state->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_GT)
        temporarily _cur_t = _on_t
          r_identifier
          r_consume_eols
          _begin_list
          while ((_next_t.type == TokenType.KEYWORD_METHOD))
            r_method
            r_consume_eols
          endWhile
          if (disable_output)     _discard_list
          else                    _push_list( Methods(_list_t) )
          if (not disable_output) _push( StateDef(_cur_t,_string_arg(-2),_node_arg(-1)->(as Methods)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_enum_sections->Int
      local _previous_cur_t = _cur_t
      _begin_list
      if ((not _consume(TokenType.SYMBOL_SEMICOLON)))
        r_categories
        r_consume_eols
        while ((not (_next_t.type == TokenType.KEYWORD_END_ENUM)))
          r_enum_section
          r_consume_eols
        endWhile
      endIf
      if (disable_output)     _discard_list
      else                    _push_list( CmdList(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_enum_section->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_CATEGORIES)
        temporarily _cur_t = _on_t
          r_categories
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      r_class_section
      _cur_t = _previous_cur_t
      return 0

    method r_categories->Int
      local _previous_cur_t = _cur_t
      r_consume_eols
      while ((_next_t.type == TokenType.IDENTIFIER))
        r_category
        while (_consume(TokenType.SYMBOL_COMMA))
          r_consume_eols
          r_category
        endWhile
        r_consume_eols
      endWhile
      _cur_t = _previous_cur_t
      return 0

    method r_category->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.IDENTIFIER)
        temporarily _cur_t = _next_t
          r_identifier
          if ((_next_t.type == TokenType.SYMBOL_OPEN_PAREN))
            r_args
          else
            if (not disable_output) _push( null, 0 )
          endIf
          if (_next_t.type == TokenType.SYMBOL_EQUALS)
            temporarily _cur_t = _on_t
              r_expression
            endTemporarily
          else
            if (not disable_output) _push( null, 0 )
          endIf
          parse_doc_comment

          if (not disable_output) _push( Category(_cur_t,_string_arg(-4),_node_arg(-3)->(as Args),_node_arg(-2),_string_arg(-1)), 4 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      r_identifier
      _cur_t = _previous_cur_t
      return 0

    method r_native_code_blocks->Int
      local _previous_cur_t = _cur_t
      r_consume_eols
      while ((not (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?))
        r_native_code_block
        r_consume_eols
      endWhile
      _cur_t = _previous_cur_t
      return 0

    method r_native_code_block->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_NATIVE_HEADER)
        temporarily _cur_t = _on_t
          if (_consume(TokenType.SYMBOL_OPEN_PAREN))
            if (_next_t.type == TokenType.INTEGER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralInteger(_cur_t,_cur_t.content,_string_to_Int("10")), 0 )
              endTemporarily
            else
              _throw_syntax_error("Integer ordinal expected.")
              _cur_t = _previous_cur_t
              return 0
            endIf
            if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
          else
            if (not disable_output) _push( null, 0 )
          endIf
          r_consume_eols
          if (_next_t.content and _next_t.content == "File")
            temporarily _cur_t = _on_t
              if (not _consume(TokenType.SYMBOL_OPEN_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_OPEN_PAREN )
              r_string
              if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
            endTemporarily
          else
            r_string
          endIf
          if (not disable_output) _push( NativeHeader(_cur_t,_int_arg(-2),_string_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_NATIVE_CODE)
        temporarily _cur_t = _on_t
          if (_consume(TokenType.SYMBOL_OPEN_PAREN))
            if (_next_t.type == TokenType.INTEGER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralInteger(_cur_t,_cur_t.content,_string_to_Int("10")), 0 )
              endTemporarily
            else
              _throw_syntax_error("Integer ordinal expected.")
              _cur_t = _previous_cur_t
              return 0
            endIf
            if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
          else
            if (not disable_output) _push( null, 0 )
          endIf
          r_consume_eols
          if (_next_t.content and _next_t.content == "File")
            temporarily _cur_t = _on_t
              if (not _consume(TokenType.SYMBOL_OPEN_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_OPEN_PAREN )
              r_string
              if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
            endTemporarily
          else
            r_string
          endIf
          if (not disable_output) _push( NativeCode(_cur_t,_int_arg(-2),_string_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _throw_syntax_error("Expected 'nativeHeader', or 'nativeCode'.")
      _cur_t = _previous_cur_t
      return 0

    method r_definition->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.IDENTIFIER)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_EQUALS)) _throw_syntax_error( &expected=TokenType.SYMBOL_EQUALS )
          r_expression
          if (not disable_output) _push( Definition(_cur_t,_cur_t.content,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (not _consume(TokenType.IDENTIFIER)) _throw_syntax_error( &expected=TokenType.IDENTIFIER )
      _cur_t = _previous_cur_t
      return 0

    method r_forEach_loop->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_FOR_EACH)
        temporarily _cur_t = _on_t
          r_consume_eols
          if (_consume(TokenType.SYMBOL_OPEN_PAREN))
            r_consume_eols
            _save_position
            r_expression
            if (((_next_t.content and _next_t.content == "in") or (_next_t.content and _next_t.content == "at")))
              _restore_position
              r_identifier
              if (_consume_content("at"))
                r_identifier
              else
                if (not disable_output) _push( null, 0 )
              endIf
              _must_consume_content("in")
              r_forEach_assignable_expression
              r_consume_eols
              if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
              r_forEach_body
              if (not disable_output) _push( ForEachIn(_cur_t,_node_arg(-7),_node_arg(-6),_node_arg(-5),_node_arg(-4),_node_arg(-3),_node_arg(-2),_node_arg(-1)->(as Statements)), 7 )
              _cur_t = _previous_cur_t
              return 0
            elseIf ((_next_t.content and _next_t.content == "of"))
              _restore_position
              r_identifier
              _must_consume_content("of")
              r_forEach_assignable_expression
              r_consume_eols
              if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
              r_forEach_body
              if (not disable_output) _push( ForEachOf(_cur_t,_node_arg(-6),_node_arg(-5),_node_arg(-4),_node_arg(-3),_node_arg(-2),_node_arg(-1)->(as Statements)), 6 )
              _cur_t = _previous_cur_t
              return 0
            else
              _restore_position
              r_forEach_assignable_expression
              r_consume_eols
              if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
              r_forEach_body
              if (not disable_output) _push( ForEachAnonymous(_cur_t,_node_arg(-5),_node_arg(-4),_node_arg(-3),_node_arg(-2),_node_arg(-1)->(as Statements)), 5 )
              _cur_t = _previous_cur_t
              return 0
            endIf
          else
            _save_position
            r_expression
            if (((_next_t.content and _next_t.content == "in") or (_next_t.content and _next_t.content == "at")))
              _restore_position
              r_identifier
              if (_consume_content("at"))
                r_identifier
              else
                if (not disable_output) _push( null, 0 )
              endIf
              _must_consume_content("in")
              r_forEach_assignable_expression
              r_forEach_body
              if (not disable_output) _push( ForEachIn(_cur_t,_node_arg(-7),_node_arg(-6),_node_arg(-5),_node_arg(-4),_node_arg(-3),_node_arg(-2),_node_arg(-1)->(as Statements)), 7 )
              _cur_t = _previous_cur_t
              return 0
            elseIf ((_next_t.content and _next_t.content == "of"))
              _restore_position
              r_identifier
              _must_consume_content("of")
              r_forEach_assignable_expression
              r_forEach_body
              if (not disable_output) _push( ForEachOf(_cur_t,_node_arg(-6),_node_arg(-5),_node_arg(-4),_node_arg(-3),_node_arg(-2),_node_arg(-1)->(as Statements)), 6 )
              _cur_t = _previous_cur_t
              return 0
            else
              _restore_position
              r_forEach_assignable_expression
              r_forEach_body
              if (not disable_output) _push( ForEachAnonymous(_cur_t,_node_arg(-5),_node_arg(-4),_node_arg(-3),_node_arg(-2),_node_arg(-1)->(as Statements)), 5 )
              _cur_t = _previous_cur_t
              return 0
            endIf
          endIf
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_forEach_assignable_expression->Int
      local _previous_cur_t = _cur_t
      if ((_next_t.type == TokenType.IDENTIFIER))
        r_identifier
        if (not _consume(TokenType.SYMBOL_EQUALS)) _throw_syntax_error( &expected=TokenType.SYMBOL_EQUALS )
      else
        if (not disable_output) _push( null, 0 )
      endIf
      r_forEach_collection
      _cur_t = _previous_cur_t
      return 0

    method r_forEach_collection->Int
      local _previous_cur_t = _cur_t
      r_expression
      if (_consume_content("from"))
        r_expression
      else
        if (not disable_output) _push( null, 0 )
      endIf
      if (_consume_content("step"))
        r_expression
      else
        if (not disable_output) _push( null, 0 )
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_forEach_body->Int
      local _previous_cur_t = _cur_t
      if (_consume(TokenType.EOL))
        r_multi_line_statements
        if (not _consume(TokenType.KEYWORD_END_FOR_EACH)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_FOR_EACH )
      else
        r_single_line_statements
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_inline_forEach->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_FOR_EACH)
        temporarily _cur_t = _on_t
          if (_next_t.content and _next_t.content == "in")
            temporarily _cur_t = _on_t
              r_forEach_collection
              if (not disable_output) _push( InlineForEachIn(_cur_t,_node_arg(-3),_node_arg(-2),_node_arg(-1)), 3 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
          if (_next_t.content and _next_t.content == "of")
            temporarily _cur_t = _on_t
              r_forEach_collection
              if (not disable_output) _push( InlineForEachOf(_cur_t,_node_arg(-3),_node_arg(-2),_node_arg(-1)), 3 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          else
            _throw_syntax_error("Expected 'in' or 'of'.")
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_if_statement->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_IF)
        temporarily _cur_t = _on_t
          if (_consume(TokenType.KEYWORD_LOCAL))
            r_identifier
            if (not _consume(TokenType.SYMBOL_EQUALS)) _throw_syntax_error( &expected=TokenType.SYMBOL_EQUALS )
            r_expression
            r_must_consume_eols
            r_multi_line_statements
            r_if_local_elseifs_or_else
            if (not _consume(TokenType.KEYWORD_END_IF)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_IF )
            if (not disable_output) _push( IfLocal(_cur_t,_string_arg(-4),_node_arg(-3),_node_arg(-2),_node_arg(-1)->(as IfLocal)), 4 )
            _cur_t = _previous_cur_t
            return 0
          endIf
          r_expression
          _consume_content("then")
          if (_consume(TokenType.EOL))
            r_scoped_multi_line_statements
            r_if_statement_multi_line_elseIf_else
            if (not _consume(TokenType.KEYWORD_END_IF)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_IF )
          else
            r_scoped_single_line_statements
            r_if_statement_single_line_elseIf_else
          endIf
          if (not disable_output) _push( If(_cur_t,_node_arg(-3),_node_arg(-2)->(as Statements),_node_arg(-1)), 3 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_if_local_elseifs_or_else->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_ELSE_IF)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.KEYWORD_LOCAL)) _throw_syntax_error( &expected=TokenType.KEYWORD_LOCAL )
          r_identifier
          if (not _consume(TokenType.SYMBOL_EQUALS)) _throw_syntax_error( &expected=TokenType.SYMBOL_EQUALS )
          r_expression
          r_must_consume_eols
          r_scoped_multi_line_statements
          r_if_local_elseifs_or_else
          if (not disable_output) _push( IfLocal(_cur_t,_string_arg(-4),_node_arg(-3),_node_arg(-2),_node_arg(-1)->(as IfLocal)), 4 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_ELSE)
        temporarily _cur_t = _on_t
          r_must_consume_eols
          if (not disable_output) _push( null, 0 )
          if (not disable_output) _push( null, 0 )
          r_scoped_multi_line_statements
          if (not disable_output) _push( null, 0 )
          if (not disable_output) _push( IfLocal(_cur_t,_string_arg(-4),_node_arg(-3),_node_arg(-2),_node_arg(-1)->(as IfLocal)), 4 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      else
        if (not disable_output) _push( null, 0 )
        _cur_t = _previous_cur_t
        return 0
      endIf

    method r_if_statement_multi_line_elseIf_else->Int
      local _previous_cur_t = _cur_t
      _save_position
      if (_next_t.type == TokenType.KEYWORD_ELSE_IF)
        temporarily _cur_t = _on_t
          r_expression
          _consume_content("then")
          if (_consume(TokenType.EOL))
            _discard_position
            r_scoped_multi_line_statements
            r_if_statement_multi_line_elseIf_else
            if (not disable_output) _push( If(_cur_t,_node_arg(-3),_node_arg(-2)->(as Statements),_node_arg(-1)), 3 )
            if (not disable_output) _push( Statements(_cur_t,_node_arg(-1)), 1 )
            _cur_t = _previous_cur_t
            return 0
          else
            _restore_position
            if (not disable_output) _push( null, 0 )
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_ELSE)
        temporarily _cur_t = _on_t
          if (_consume(TokenType.EOL))
            _discard_position
            if (not disable_output) _push( null, 0 )
            r_scoped_multi_line_statements
            if (not disable_output) _push( null, 0 )
            if (not disable_output) _push( If(_cur_t,_node_arg(-3),_node_arg(-2)->(as Statements),_node_arg(-1)), 3 )
            if (not disable_output) _push( Statements(_cur_t,_node_arg(-1)), 1 )
            _cur_t = _previous_cur_t
            return 0
          else
            _restore_position
            if (not disable_output) _push( null, 0 )
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      else
        _discard_position
        if (not disable_output) _push( null, 0 )
        _cur_t = _previous_cur_t
        return 0
      endIf

    method r_if_statement_single_line_elseIf_else->Int
      local _previous_cur_t = _cur_t
      _save_position
      if (_next_t.type == TokenType.KEYWORD_ELSE_IF)
        temporarily _cur_t = _on_t
          r_expression
          _consume_content("then")
          if (_consume(TokenType.EOL))
            _restore_position
            if (not disable_output) _push( null, 0 )
            _cur_t = _previous_cur_t
            return 0
          else
            _discard_position
            r_scoped_single_line_statements
            r_if_statement_single_line_elseIf_else
            if (not disable_output) _push( If(_cur_t,_node_arg(-3),_node_arg(-2)->(as Statements),_node_arg(-1)), 3 )
            if (not disable_output) _push( Statements(_cur_t,_node_arg(-1)), 1 )
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_ELSE)
        temporarily _cur_t = _on_t
          if (_consume(TokenType.EOL))
            _restore_position
            if (not disable_output) _push( null, 0 )
            _cur_t = _previous_cur_t
            return 0
          else
            _discard_position
            if (not disable_output) _push( null, 0 )
            r_scoped_single_line_statements
            if (not disable_output) _push( null, 0 )
            if (not disable_output) _push( If(_cur_t,_node_arg(-3),_node_arg(-2)->(as Statements),_node_arg(-1)), 3 )
            if (not disable_output) _push( Statements(_cur_t,_node_arg(-1)), 1 )
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      else
        _discard_position
        if (not disable_output) _push( null, 0 )
        _cur_t = _previous_cur_t
        return 0
      endIf

    method r_inline_which->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_WHICH)
        temporarily _cur_t = _on_t
          r_consume_eols
          if (not _consume(TokenType.SYMBOL_OPEN_CURLY)) _throw_syntax_error( &expected=TokenType.SYMBOL_OPEN_CURLY )
          r_consume_eols
          _begin_list
          r_inline_which_case
          r_consume_eols
          while (_consume(TokenType.SYMBOL_DOUBLE_VERTICAL_BAR))
            r_consume_eols
            r_inline_which_case
            r_consume_eols
          endWhile
          if (disable_output)     _discard_list
          else                    _push_list( InlineWhichCases(_list_t) )
          if (not _consume(TokenType.SYMBOL_CLOSE_CURLY)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_CURLY )
          if (not disable_output) _push( InlineWhich(_cur_t,_node_arg(-1)->(as InlineWhichCases)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_inline_which_case->Int
      local _previous_cur_t = _cur_t
      r_expression
      r_consume_eols
      if (_consume(TokenType.SYMBOL_COLON))
        r_expression
        r_consume_eols
      else
        if (not disable_output) _push( null, 0 )
      endIf
      if (not disable_output) _push( InlineWhichCase(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      _cur_t = _previous_cur_t
      return 0

    method r_method->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_METHOD)
        temporarily _cur_t = _on_t
          if (_consume_content("to"))
            if (not _consume(TokenType.SYMBOL_ARROW)) _throw_syntax_error( &expected=TokenType.SYMBOL_ARROW )
            r_type
            r_procedure_parameters
            r_procedure_attributes
            _consume(TokenType.SYMBOL_COLON)
            r_procedure_doc_comment_and_statements
            if (not disable_output) _push( ToTypeMethod(_cur_t,_node_arg(-5)->(as Type),_node_arg(-4)->(as Parameters),_node_arg(-3)->(as Attributes),_string_arg(-2),_node_arg(-1)->(as Statements)), 5 )
            _cur_t = _previous_cur_t
            return 0
          endIf
          r_procedure_name
          r_procedure_parameters
          r_procedure_return_type
          r_procedure_attributes
          _consume(TokenType.SYMBOL_COLON)
          r_procedure_doc_comment_and_statements
          if (not disable_output) _push( Method(_cur_t,_string_arg(-6),_node_arg(-5)->(as Parameters),_node_arg(-4)->(as Type),_node_arg(-3)->(as Attributes),_string_arg(-2),_node_arg(-1)->(as Statements)), 6 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_scoped_single_line_statements->Int
      local _previous_cur_t = _cur_t
      r_single_line_statements
      _cur_t = _previous_cur_t
      return 0

    method r_scoped_multi_line_statements->Int
      local _previous_cur_t = _cur_t
      r_multi_line_statements
      _cur_t = _previous_cur_t
      return 0

    method r_global_method->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_METHOD)
        temporarily _cur_t = _on_t
          r_procedure_name
          r_procedure_parameters
          r_procedure_return_type
          r_procedure_attributes
          _consume(TokenType.SYMBOL_COLON)
          r_procedure_doc_comment_and_statements
          if (not disable_output) _push( GlobalMethod(_cur_t,_string_arg(-6),_node_arg(-5)->(as Parameters),_node_arg(-4)->(as Type),_node_arg(-3)->(as Attributes),_string_arg(-2),_node_arg(-1)->(as Statements)), 6 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_global_properties->Int
      local _previous_cur_t = _cur_t
      _begin_list
      r_consume_eols
      r_property_declaration
      while (_consume(TokenType.SYMBOL_COMMA))
        r_consume_eols
        r_property_declaration
      endWhile
      if (disable_output)     _discard_list
      else                    _push_list( PropertyList(_list_t) )
      r_optional_type
      r_global_property_attributes
      parse_doc_comment

      if (not disable_output) _push( GlobalPropertyDeclarations(_cur_t,_node_arg(-4)->(as PropertyList),_node_arg(-3)->(as Type),_node_arg(-2)->(as Attributes),_string_arg(-1)), 4 )
      _cur_t = _previous_cur_t
      return 0

    method r_properties->Int
      local _previous_cur_t = _cur_t
      _begin_list
      r_consume_eols
      r_property_declaration
      while (_consume(TokenType.SYMBOL_COMMA))
        r_consume_eols
        r_property_declaration
      endWhile
      if (disable_output)     _discard_list
      else                    _push_list( PropertyList(_list_t) )
      r_optional_type
      r_property_attributes
      parse_doc_comment

      if (not disable_output) _push( PropertyDeclarations(_cur_t,_node_arg(-4)->(as PropertyList),_node_arg(-3)->(as Type),_node_arg(-2)->(as Attributes),_string_arg(-1)), 4 )
      _cur_t = _previous_cur_t
      return 0

    method r_property_declaration->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.IDENTIFIER)
        temporarily _cur_t = _on_t
          r_optional_initial_value
          if (not disable_output) _push( null, 0 )
          if (not disable_output) _push( Property(_cur_t,_cur_t.content,_node_arg(-2),_node_arg(-1)->(as Type)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.PLACEHOLDER)
        temporarily _cur_t = _on_t
          if ((not disable_output))
            _throw_syntax_error
            _cur_t = _previous_cur_t
            return 0
          endIf
          r_optional_initial_value
          if (not disable_output) _push( null, 0 )
          if (not disable_output) _push( Property(_cur_t,_cur_t.content,_node_arg(-2),_node_arg(-1)->(as Type)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_NATIVE)
        temporarily _cur_t = _on_t
          if (_next_t.type == TokenType.SYMBOL_LTLT)
            temporarily _cur_t = _on_t
              r_identifier
              if (not _consume(TokenType.SYMBOL_GTGT)) _throw_syntax_error( &expected=TokenType.SYMBOL_GTGT )
              r_string
              if (not disable_output) _push( NativeProperty(_cur_t,_string_arg(-2),_string_arg(-1)), 2 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          else
            r_string
            if (not disable_output) _push( NativeProperty(_cur_t,"C",_string_arg(-1)), 1 )
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      endIf
      if (not _consume(TokenType.IDENTIFIER)) _throw_syntax_error( &expected=TokenType.IDENTIFIER )
      _cur_t = _previous_cur_t
      return 0

    method r_global_property_attributes->Int
      local _previous_cur_t = _cur_t
      _begin_list
      if (_next_t.type == TokenType.SYMBOL_OPEN_SQUARE)
        temporarily _cur_t = _on_t
          while (((_position < _limit) and (not (_next_t.type == TokenType.SYMBOL_CLOSE_SQUARE))))
            r_global_property_attribute
            _consume(TokenType.SYMBOL_COMMA)
          endWhile
          if (not _consume(TokenType.SYMBOL_CLOSE_SQUARE)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_SQUARE )
        endTemporarily
      endIf
      if (disable_output)     _discard_list
      else                    _push_list( Attributes(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_global_property_attribute->Int
      local _previous_cur_t = _cur_t
      _throw_syntax_error("Illegal global property attribute.")
      _cur_t = _previous_cur_t
      return 0

    method r_property_attributes->Int
      local _previous_cur_t = _cur_t
      _begin_list
      if (_next_t.type == TokenType.SYMBOL_OPEN_SQUARE)
        temporarily _cur_t = _on_t
          while (((_position < _limit) and (not (_next_t.type == TokenType.SYMBOL_CLOSE_SQUARE))))
            r_property_attribute
            _consume(TokenType.SYMBOL_COMMA)
          endWhile
          if (not _consume(TokenType.SYMBOL_CLOSE_SQUARE)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_SQUARE )
        endTemporarily
      endIf
      if (disable_output)     _discard_list
      else                    _push_list( Attributes(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_property_attribute->Int
      local _previous_cur_t = _cur_t
      _throw_syntax_error("Illegal property attribute.")
      _cur_t = _previous_cur_t
      return 0

    method r_multi_line_statements->Int
      local _previous_cur_t = _cur_t
      r_consume_eols_and_semicolons
      _begin_list
      while (((_position < _limit) and (not (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?)))
        r_control_structure
        r_consume_eols_and_semicolons
      endWhile
      if (disable_output)     _discard_list
      else                    _push_list( Statements(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_single_line_statements->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.EOL)
        temporarily _cur_t = _on_t
          r_consume_eols
          if ((not (_next_t.type == TokenType.SYMBOL_OPEN_CURLY)))
            _begin_list
            if (disable_output)     _discard_list
            else                    _push_list( Statements(_list_t) )
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_OPEN_CURLY)
        temporarily _cur_t = _on_t
          r_multi_line_statements
          if (not _consume(TokenType.SYMBOL_CLOSE_CURLY)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_CURLY )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _begin_list
      if ((_consume(TokenType.EOL) or ((_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)? and (not (_next_t.type == TokenType.SYMBOL_SEMICOLON)))))
        if (disable_output)     _discard_list
        else                    _push_list( Statements(_list_t) )
        _cur_t = _previous_cur_t
        return 0
      endIf
      r_statement
      while (_consume(TokenType.SYMBOL_SEMICOLON))
        if ((not (_next_t.type == TokenType.EOL)))
          r_statement
        endIf
      endWhile
      r_consume_eols
      if (disable_output)     _discard_list
      else                    _push_list( Statements(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_control_structure->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_LOCAL)
        temporarily _cur_t = _on_t
          r_local_declarations
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_LOCALIZE)
        temporarily _cur_t = _next_t
          r_localize
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_BLOCK)
        temporarily _cur_t = _next_t
          r_block
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_CONTINGENT)
        temporarily _cur_t = _next_t
          r_contingent
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_FOR_EACH)
        temporarily _cur_t = _next_t
          r_forEach_loop
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_IF)
        temporarily _cur_t = _next_t
          r_if_statement
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_LOOP)
        temporarily _cur_t = _next_t
          r_loop
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_WHICH)
        temporarily _cur_t = _next_t
          r_which_conditional
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_WHILE)
        temporarily _cur_t = _next_t
          r_while_loop
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_TEMPORARILY)
        temporarily _cur_t = _next_t
          r_temporarily
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_TRY)
        temporarily _cur_t = _next_t
          r_try_catch
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_USE)
        temporarily _cur_t = _next_t
          r_use
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      r_statement
      _cur_t = _previous_cur_t
      return 0

    method r_optional_args->Int
      local _previous_cur_t = _cur_t
      if ((_next_t.type == TokenType.SYMBOL_OPEN_PAREN))
        r_args
      else
        if (not disable_output) _push( null, 0 )
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_args->Int
      local _previous_cur_t = _cur_t
      _begin_list
      if (_consume(TokenType.SYMBOL_OPEN_PAREN))
        r_consume_eols
        if (_consume(TokenType.SYMBOL_CLOSE_PAREN))
          if (disable_output)     _discard_list
          else                    _push_list( Args(_list_t) )
          _cur_t = _previous_cur_t
          return 0
        endIf
        r_consume_eols
        while (((_position < _limit) and (not (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?)))
          r_arg
          r_consume_eols
          _consume(TokenType.SYMBOL_COMMA)
          r_consume_eols
        endWhile
        if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
      else
        while ((((_position < _limit) and (not (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?)) and (not (_next_t.type == TokenType.EOL))))
          r_arg
          if (_consume(TokenType.SYMBOL_COMMA))
            r_consume_eols
          endIf
        endWhile
      endIf
      if (disable_output)     _discard_list
      else                    _push_list( Args(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_arg->Int
      local _previous_cur_t = _cur_t
      r_arg_inner
      _cur_t = _previous_cur_t
      return 0

    method r_arg_inner->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_AMPERSAND)
        temporarily _cur_t = _on_t
          if (_next_t.type == TokenType.SYMBOL_BANG)
            temporarily _cur_t = _on_t
              r_identifier
              if (_consume(TokenType.SYMBOL_EQUALS))
                r_expression
              else
                if (not disable_output) _push( null, 0 )
              endIf
              if (not disable_output) _push( NamedArg(_cur_t,_string_arg(-2),_node_arg(-1),_string_to_Logical("true")), 2 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          else
            r_identifier
            if (_consume(TokenType.SYMBOL_EQUALS))
              r_expression
            else
              if (not disable_output) _push( null, 0 )
            endIf
            if (not disable_output) _push( NamedArg(_cur_t,_string_arg(-2),_node_arg(-1)), 2 )
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      elseIf (_next_t.type == TokenType.SYMBOL_BITWISE_AND_EQUALS)
        temporarily _cur_t = _on_t
          r_identifier
          if (_consume(TokenType.SYMBOL_EQUALS))
            r_expression
          else
            if (not disable_output) _push( null, 0 )
          endIf
          if (not disable_output) _push( NamedArg(_cur_t,_string_arg(-2),_node_arg(-1),_string_to_Logical("false"),_string_to_Logical("true")), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      r_expression
      _cur_t = _previous_cur_t
      return 0

    method r_statement->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_ASSERT)
        temporarily _cur_t = _on_t
          _save_position
          r_expression
          if (disable_output) _discard_position
          else                _create_token_list( &preserve_stack )
          if (not disable_output) _push( Assert(_cur_t,_node_arg(-2),_node_arg(-1)->(as TokenList)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_ENSURE)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_LTLT)) _throw_syntax_error( &expected=TokenType.SYMBOL_LTLT )
          r_expression
          if (not _consume(TokenType.SYMBOL_GTGT)) _throw_syntax_error( &expected=TokenType.SYMBOL_GTGT )
          r_args
          if (not disable_output) _push( Ensure(_cur_t,_node_arg(-2),_node_arg(-1)->(as Args)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_ESCAPE_BLOCK)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( EscapeBlock(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_ESCAPE_CONTINGENT)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( EscapeContingent(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_ESCAPE_FOR_EACH)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( EscapeForEach(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_ESCAPE_IF)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( EscapeIf(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_ESCAPE_LOOP)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( EscapeLoop(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_ESCAPE_TRY)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( EscapeTry(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_ESCAPE_WHICH)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( EscapeWhich(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_ESCAPE_WHILE)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( EscapeWhile(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_NECESSARY)
        temporarily _cur_t = _on_t
          r_expression
          if (not disable_output) _push( Necessary(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_NEXT_ITERATION)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( NextIteration(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_NO_ACTION)
        temporarily _cur_t = _on_t
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "print")
        temporarily _cur_t = _on_t
          r_args
          if (not disable_output) _push( Access(_cur_t,_cur_t.content,_node_arg(-1)->(as Args)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "println")
        temporarily _cur_t = _on_t
          r_args
          if (not disable_output) _push( Access(_cur_t,_cur_t.content,_node_arg(-1)->(as Args)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_RETURN)
        temporarily _cur_t = _on_t
          r_optional_expression
          if (not disable_output) _push( Return(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_SUFFICIENT)
        temporarily _cur_t = _on_t
          r_expression
          if (not disable_output) _push( Sufficient(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_SWAP_VALUES)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_OPEN_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_OPEN_PAREN )
          r_expression
          if (not _consume(TokenType.SYMBOL_COMMA)) _throw_syntax_error( &expected=TokenType.SYMBOL_COMMA )
          r_expression
          if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
          if (not disable_output) _push( SwapValues(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_TRACE)
        temporarily _cur_t = _next_t
          r_verbose_trace
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.SYMBOL_BRIEF_TRACE)
        temporarily _cur_t = _next_t
          r_brief_trace
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_THROW)
        temporarily _cur_t = _on_t
          r_expression
          if (not disable_output) _push( Throw(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_NATIVE_HEADER)
        temporarily _cur_t = _next_t
          r_native_code_block
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_NATIVE_CODE)
        temporarily _cur_t = _next_t
          r_native_code_block
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_PLUS_PLUS)
        temporarily _cur_t = _on_t
          r_expression
          if (not disable_output) _push( Increment(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_MINUS_MINUS)
        temporarily _cur_t = _on_t
          r_expression
          if (not disable_output) _push( Decrement(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      r_expression
      if (_next_t.type == TokenType.SYMBOL_PLUS_PLUS)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( Increment(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_MINUS_MINUS)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( Decrement(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_EQUALS)
        temporarily _cur_t = _on_t
          r_consume_eols
          r_expression
          if (not disable_output) _push( Assign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_PLUS_EQUALS)
        temporarily _cur_t = _on_t
          r_consume_eols
          r_expression
          if (not disable_output) _push( AddAndAssign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_MINUS_EQUALS)
        temporarily _cur_t = _on_t
          r_consume_eols
          r_expression
          if (not disable_output) _push( SubtractAndAssign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_TIMES_EQUALS)
        temporarily _cur_t = _on_t
          r_consume_eols
          r_expression
          if (not disable_output) _push( MultiplyAndAssign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_DIVIDE_EQUALS)
        temporarily _cur_t = _on_t
          r_consume_eols
          r_expression
          if (not disable_output) _push( DivideAndAssign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_MOD_EQUALS)
        temporarily _cur_t = _on_t
          r_consume_eols
          r_expression
          if (not disable_output) _push( ModAndAssign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_POWER_EQUALS)
        temporarily _cur_t = _on_t
          r_consume_eols
          r_expression
          if (not disable_output) _push( PowerAndAssign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_BITWISE_AND_EQUALS)
        temporarily _cur_t = _on_t
          r_consume_eols
          r_expression
          if (not disable_output) _push( BitwiseAndAndAssign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_BITWISE_OR_EQUALS)
        temporarily _cur_t = _on_t
          r_consume_eols
          r_expression
          if (not disable_output) _push( BitwiseOrAndAssign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_BITWISE_XOR_EQUALS)
        temporarily _cur_t = _on_t
          r_consume_eols
          r_expression
          if (not disable_output) _push( BitwiseXorAndAssign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_SHIFT_LEFT_EQUALS)
        temporarily _cur_t = _on_t
          r_consume_eols
          r_expression
          if (not disable_output) _push( BitShiftLeftAndAssign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_SHIFT_RIGHT_EQUALS)
        temporarily _cur_t = _on_t
          r_consume_eols
          r_expression
          if (not disable_output) _push( BitShiftRightAndAssign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_SHIFT_RIGHT_X_EQUALS)
        temporarily _cur_t = _on_t
          r_consume_eols
          r_expression
          if (not disable_output) _push( BitShiftRightXAndAssign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_ACCESS_EQUALS)
        temporarily _cur_t = _on_t
          r_consume_eols
          if (not disable_output) _push( AccessAndAssignContext(_cur_t,_node_arg(-1)), 1 )
          if (_next_t.type == TokenType.SYMBOL_AT)
            temporarily _cur_t = _on_t
              r_identifier
              if (not disable_output) _push( ContextDirectAccess(_cur_t,_node_arg(-2),_string_arg(-1)), 2 )
            endTemporarily
          else
            r_procedure_name
            r_access_args
            if (not disable_output) _push( ContextAccess(_cur_t,_node_arg(-3),_string_arg(-2),_node_arg(-1)->(as Args)), 3 )
          endIf
          r_access_inner
          if (not disable_output) _push( AccessAndAssign(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      while ((_next_t.type == TokenType.SYMBOL_QUESTION_DOT))
        if (_next_t.type == TokenType.SYMBOL_QUESTION_DOT)
          temporarily _cur_t = _on_t
            r_consume_eols
            if (not disable_output) _push( ConditionalContext(_cur_t,_node_arg(-1)), 1 )
            r_member_access
          endTemporarily
        endIf
      endWhile
      if ((((_position < _limit) and (not (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?)) and (not (_next_t.type == TokenType.EOL))))
        r_args
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_verbose_trace->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_TRACE)
        temporarily _cur_t = _on_t
          _begin_list
          while ((not (_next_t.type == TokenType.EOL)))
            _save_position
            r_expression
            if (disable_output) _discard_position
            else                _create_token_list( &preserve_stack )
            if (not disable_output) _push( TracedExpression(_cur_t,_node_arg(-2),_node_arg(-1)->(as TokenList)), 2 )
            _consume(TokenType.SYMBOL_COMMA)
          endWhile
          if (disable_output)     _discard_list
          else                    _push_list( TracedExpressions(_list_t) )
          if (not disable_output) _push( VerboseTrace(_cur_t,_node_arg(-1)->(as TracedExpressions)), 1 )
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_brief_trace->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_BRIEF_TRACE)
        temporarily _cur_t = _on_t
          _begin_list
          while ((not (_next_t.type == TokenType.EOL)))
            _save_position
            r_expression
            if (disable_output) _discard_position
            else                _create_token_list( &preserve_stack )
            if (not disable_output) _push( TracedExpression(_cur_t,_node_arg(-2),_node_arg(-1)->(as TokenList)), 2 )
            _consume(TokenType.SYMBOL_COMMA)
          endWhile
          if (disable_output)     _discard_list
          else                    _push_list( TracedExpressions(_list_t) )
          if (not disable_output) _push( BriefTrace(_cur_t,_node_arg(-1)->(as TracedExpressions)), 1 )
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_local_declarations->Int
      local _previous_cur_t = _cur_t
      _begin_list
      r_consume_eols
      r_local_declaration
      while (_consume(TokenType.SYMBOL_COMMA))
        r_consume_eols
        r_local_declaration
      endWhile
      if (disable_output)     _discard_list
      else                    _push_list( LocalList(_list_t) )
      r_optional_type
      if (not disable_output) _push( LocalDeclarations(_cur_t,_node_arg(-2)->(as LocalList),_node_arg(-1)->(as Type)), 2 )
      _cur_t = _previous_cur_t
      return 0

    method r_local_declaration->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.IDENTIFIER)
        temporarily _cur_t = _on_t
          r_optional_parameter_initial_value
          if (not disable_output) _push( null, 0 )
          if (not disable_output) _push( Local(_cur_t,_cur_t.content,_node_arg(-3),_node_arg(-2)->(as TokenList),_node_arg(-1)->(as Type)), 3 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (not _consume(TokenType.IDENTIFIER)) _throw_syntax_error( &expected=TokenType.IDENTIFIER )
      _cur_t = _previous_cur_t
      return 0

    method r_localize->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_LOCALIZE)
        temporarily _cur_t = _on_t
          _begin_list
          r_localize_declaration
          while (_consume(TokenType.SYMBOL_COMMA))
            r_localize_declaration
          endWhile
          if (disable_output)     _discard_list
          else                    _push_list( LocalList(_list_t) )
          if (not disable_output) _push( null, 0 )
          if (not disable_output) _push( LocalDeclarations(_cur_t,_node_arg(-2)->(as LocalList),_node_arg(-1)->(as Type)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_localize_declaration->Int
      local _previous_cur_t = _cur_t
      _save_position
      r_identifier
      if (disable_output) _discard_position
      else                _create_token_list( &preserve_stack )
      initial_value_tokens = _pop

      if (not disable_output) _push( null, 0 )
      if (not disable_output) _push( Access(_cur_t,_string_arg(-2),_node_arg(-1)->(as Args)), 2 )
      r_subclass
      _push( initial_value_tokens )

      if (not disable_output) _push( null, 0 )
      if (not disable_output) _push( Local(_cur_t,_string_arg(-4),_node_arg(-3),_node_arg(-2)->(as TokenList),_node_arg(-1)->(as Type)), 4 )
      _cur_t = _previous_cur_t
      return 0

    method r_block->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_BLOCK)
        temporarily _cur_t = _on_t
          if (_consume(TokenType.EOL))
            if (not disable_output) _push( null, 0 )
          else
            _begin_list
            r_block_assignment
            while (_consume(TokenType.SYMBOL_COMMA))
              r_block_assignment
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( CmdList(_list_t) )
            r_must_consume_eols
          endIf
          r_multi_line_statements
          if (not _consume(TokenType.KEYWORD_END_BLOCK)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_BLOCK )
        endTemporarily
      endIf
      if (not disable_output) _push( Block(_cur_t,_node_arg(-2),_node_arg(-1)->(as Statements)), 2 )
      _cur_t = _previous_cur_t
      return 0

    method r_block_assignment->Int
      local _previous_cur_t = _cur_t
      r_identifier
      if (_next_t.type == TokenType.SYMBOL_EQUALS)
        temporarily _cur_t = _on_t
          r_expression
          if (not disable_output) _push( Assign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_contingent->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_CONTINGENT)
        temporarily _cur_t = _on_t
          r_multi_line_statements
          if (_next_t.type == TokenType.KEYWORD_SATISFIED)
            temporarily _cur_t = _on_t
              r_multi_line_statements
            endTemporarily
          else
            if (not disable_output) _push( null, 0 )
          endIf
          if (_next_t.type == TokenType.KEYWORD_UNSATISFIED)
            temporarily _cur_t = _on_t
              r_multi_line_statements
            endTemporarily
          else
            if (not disable_output) _push( null, 0 )
          endIf
          if (not _consume(TokenType.KEYWORD_END_CONTINGENT)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_CONTINGENT )
          if (not disable_output) _push( Contingent(_cur_t,_node_arg(-3)->(as Statements),_node_arg(-2)->(as Statements),_node_arg(-1)->(as Statements)), 3 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_loop->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_LOOP)
        temporarily _cur_t = _on_t
          if (_next_t.type == TokenType.EOL)
            temporarily _cur_t = _on_t
              r_multi_line_statements
              if (not _consume(TokenType.KEYWORD_END_LOOP)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_LOOP )
              if (not disable_output) _push( InfiniteLoop(_cur_t,_node_arg(-1)->(as Statements)), 1 )
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          else
            r_expression
            if (_consume(TokenType.EOL))
              r_multi_line_statements
              if (not _consume(TokenType.KEYWORD_END_LOOP)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_LOOP )
            else
              r_single_line_statements
            endIf
            if (not disable_output) _push( Loop(_cur_t,_node_arg(-2),_node_arg(-1)->(as Statements)), 2 )
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_which_conditional->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_WHICH)
        temporarily _cur_t = _on_t
          r_expression
          r_must_consume_eols
          _begin_list
          while ((_next_t.type == TokenType.KEYWORD_CASE))
            if (_next_t.type == TokenType.KEYWORD_CASE)
              temporarily _cur_t = _on_t
                r_consume_eols
                _begin_list
                r_expression
                while (_consume(TokenType.SYMBOL_COMMA))
                  r_consume_eols
                  r_expression
                endWhile
                if ((not _consume(TokenType.SYMBOL_COLON)))
                  if (not _consume(TokenType.EOL)) _throw_syntax_error( &expected=TokenType.EOL )
                endIf
                if (disable_output)     _discard_list
                else                    _push_list( Args(_list_t) )
                r_scoped_multi_line_statements
                if (not disable_output) _push( WhichCase(_cur_t,_node_arg(-2)->(as Args),_node_arg(-1)->(as Statements)), 2 )
              endTemporarily
            endIf
          endWhile
          if (disable_output)     _discard_list
          else                    _push_list( WhichCases(_list_t) )
          if (_next_t.type == TokenType.KEYWORD_OTHERS)
            temporarily _cur_t = _on_t
              if ((not _consume(TokenType.SYMBOL_COLON)))
                if (not _consume(TokenType.EOL)) _throw_syntax_error( &expected=TokenType.EOL )
              endIf
              r_scoped_multi_line_statements
            endTemporarily
          else
            if (not disable_output) _push( null, 0 )
          endIf
          if (not _consume(TokenType.KEYWORD_END_WHICH)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_WHICH )
          if (not disable_output) _push( Which(_cur_t,_node_arg(-3),_node_arg(-2)->(as WhichCases),_node_arg(-1)->(as Statements)), 3 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_while_loop->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_WHILE)
        temporarily _cur_t = _on_t
          r_expression
          if (_consume(TokenType.EOL))
            r_multi_line_statements
            if (not _consume(TokenType.KEYWORD_END_WHILE)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_WHILE )
          else
            r_single_line_statements
          endIf
          if (not disable_output) _push( While(_cur_t,_node_arg(-2),_node_arg(-1)->(as Statements)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_try_catch->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_TRY)
        temporarily _cur_t = _on_t
          r_multi_line_statements
          r_catches
          if (not _consume(TokenType.KEYWORD_END_TRY)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_TRY )
          if (not disable_output) _push( Try(_cur_t,_node_arg(-2)->(as Statements),_node_arg(-1)->(as Catches)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_catches->Int
      local _previous_cur_t = _cur_t
      _begin_list
      while ((_next_t.type == TokenType.KEYWORD_CATCH))
        if (_next_t.type == TokenType.KEYWORD_CATCH)
          temporarily _cur_t = _on_t
            if (_consume(TokenType.SYMBOL_OPEN_PAREN))
              r_catch_clause
              if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
            else
              r_catch_clause
            endIf
            r_multi_line_statements
            if (not disable_output) _push( Catch(_cur_t,_string_arg(-3),_node_arg(-2)->(as Type),_node_arg(-1)->(as Statements)), 3 )
          endTemporarily
        endIf
      endWhile
      if (disable_output)     _discard_list
      else                    _push_list( Catches(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_catch_clause->Int
      local _previous_cur_t = _cur_t
      _save_position
      r_identifier
      if (_consume(TokenType.SYMBOL_COLON))
        _discard_position
        r_type
      else
        _restore_position
        if (not disable_output) _push( null, 0 )
        r_type
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_temporarily->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_TEMPORARILY)
        temporarily _cur_t = _on_t
          _begin_list
          r_temporary_assignment
          while (_consume(TokenType.SYMBOL_COMMA))
            r_consume_eols
            r_temporary_assignment
          endWhile
          if (disable_output)     _discard_list
          else                    _push_list( TemporaryAssignments(_list_t) )
          r_must_consume_eols
          r_multi_line_statements
          if (not _consume(TokenType.KEYWORD_END_TEMPORARILY)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_TEMPORARILY )
          if (not disable_output) _push( Temporarily(_cur_t,_node_arg(-2)->(as TemporaryAssignments),_node_arg(-1)->(as Statements)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_temporary_assignment->Int
      local _previous_cur_t = _cur_t
      r_expression
      if (_next_t.type == TokenType.SYMBOL_EQUALS)
        temporarily _cur_t = _on_t
          r_expression
          if (not disable_output) _push( TemporaryAssignment(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (not _consume(TokenType.SYMBOL_EQUALS)) _throw_syntax_error( &expected=TokenType.SYMBOL_EQUALS )
      _cur_t = _previous_cur_t
      return 0

    method r_use->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_USE)
        temporarily _cur_t = _on_t
          _begin_list
          r_used_resource
          while (_consume(TokenType.SYMBOL_COMMA))
            r_consume_eols
            r_used_resource
          endWhile
          if (disable_output)     _discard_list
          else                    _push_list( UsedResources(_list_t) )
          r_must_consume_eols
          r_multi_line_statements
          if (not _consume(TokenType.KEYWORD_END_USE)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_USE )
          if (not disable_output) _push( Use(_cur_t,_node_arg(-2)->(as UsedResources),_node_arg(-1)->(as Statements)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_used_resource->Int
      local _previous_cur_t = _cur_t
      _save_position
      if (_next_t.type == TokenType.IDENTIFIER)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( Identifier(_cur_t,_cur_t.content), 0 )
          if (_next_t.type == TokenType.SYMBOL_EQUALS)
            temporarily _cur_t = _on_t
              r_expression
              if (not disable_output) _push( UsedResource(_cur_t,_string_arg(-2),_node_arg(-1)), 2 )
              _discard_position
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          endIf
        endTemporarily
      endIf
      _restore_position
      if (not disable_output) _push( null, 0 )
      r_expression
      if (not disable_output) _push( UsedResource(_cur_t,_string_arg(-2),_node_arg(-1)), 2 )
      _cur_t = _previous_cur_t
      return 0
      r_expression

    method r_module_path->Int
      local _previous_cur_t = _cur_t
      _begin_list
      r_identifier
      while (_consume(TokenType.SYMBOL_SLASH))
        r_identifier
      endWhile
      if (disable_output)     _discard_list
      else                    _push_list( CmdList(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_uses_attributes->Int
      local _previous_cur_t = _cur_t
      _begin_list
      if (_next_t.type == TokenType.SYMBOL_OPEN_SQUARE)
        temporarily _cur_t = _on_t
          while (((_position < _limit) and (not (_next_t.type == TokenType.SYMBOL_CLOSE_SQUARE))))
            r_uses_attribute
            _consume(TokenType.SYMBOL_COMMA)
          endWhile
          if (not _consume(TokenType.SYMBOL_CLOSE_SQUARE)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_SQUARE )
        endTemporarily
      endIf
      if (disable_output)     _discard_list
      else                    _push_list( Attributes(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_uses_attribute->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_EXPORT)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributeExport(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "noInclude")
        temporarily _cur_t = _on_t
          if (not disable_output) _push( AttributeNoInclude(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _throw_syntax_error("Illegal 'uses' attribute. Expected any of [export noInclude].")
      _cur_t = _previous_cur_t
      return 0

    method r_access_args->Int
      local _previous_cur_t = _cur_t
      if ((not (_next_t.type == TokenType.SYMBOL_OPEN_PAREN)))
        if (not disable_output) _push( null, 0 )
        _cur_t = _previous_cur_t
        return 0
      endIf
      r_args
      _cur_t = _previous_cur_t
      return 0

    method r_optional_expression->Int
      local _previous_cur_t = _cur_t
      if (((_next_t.type == TokenType.EOL) or (_next_t.type == TokenType.SYMBOL_SEMICOLON)))
        if (not disable_output) _push( null, 0 )
        _cur_t = _previous_cur_t
        return 0
      endIf
      r_expression
      _cur_t = _previous_cur_t
      return 0

    method r_expression->Int
      local _previous_cur_t = _cur_t
      r_logical_xor
      _cur_t = _previous_cur_t
      return 0

    method r_logical_xor->Int
      local _previous_cur_t = _cur_t
      r_logical_or
      r_logical_xor__inner
      _cur_t = _previous_cur_t
      return 0

    method r_logical_xor__inner->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_XOR)
        temporarily _cur_t = _on_t
          _consume_eols
          r_logical_or
          if (not disable_output) _push( LogicalXor(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_logical_xor__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_logical_or->Int
      local _previous_cur_t = _cur_t
      r_logical_and
      r_logical_or__inner
      _cur_t = _previous_cur_t
      return 0

    method r_logical_or__inner->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_OR)
        temporarily _cur_t = _on_t
          _consume_eols
          r_logical_and
          if (not disable_output) _push( LogicalOr(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_logical_or__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_logical_and->Int
      local _previous_cur_t = _cur_t
      r_comparison
      r_logical_and__inner
      _cur_t = _previous_cur_t
      return 0

    method r_logical_and__inner->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_AND)
        temporarily _cur_t = _on_t
          _consume_eols
          r_comparison
          if (not disable_output) _push( LogicalAnd(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_logical_and__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_comparison->Int
      local _previous_cur_t = _cur_t
      r_reference_comparison
      r_comparison__inner
      _cur_t = _previous_cur_t
      return 0

    method r_comparison__inner->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_EQ)
        temporarily _cur_t = _on_t
          _consume_eols
          r_reference_comparison
          if (not disable_output) _push( CompareEQ(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_comparison__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_NE)
        temporarily _cur_t = _on_t
          _consume_eols
          r_reference_comparison
          if (not disable_output) _push( CompareNE(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_comparison__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_LT)
        temporarily _cur_t = _on_t
          _consume_eols
          r_reference_comparison
          if (not disable_output) _push( CompareLT(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_comparison__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_GT)
        temporarily _cur_t = _on_t
          _consume_eols
          r_reference_comparison
          if (not disable_output) _push( CompareGT(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_comparison__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_LE)
        temporarily _cur_t = _on_t
          _consume_eols
          r_reference_comparison
          if (not disable_output) _push( CompareLE(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_comparison__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_GE)
        temporarily _cur_t = _on_t
          _consume_eols
          r_reference_comparison
          if (not disable_output) _push( CompareGE(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_comparison__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_COMPARE)
        temporarily _cur_t = _on_t
          _consume_eols
          r_reference_comparison
          if (not disable_output) _push( CompareOp(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_comparison__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_reference_comparison->Int
      local _previous_cur_t = _cur_t
      r_range
      if (_next_t.type == TokenType.KEYWORD_IS)
        temporarily _cur_t = _on_t
          if (_consume(TokenType.KEYWORD_NOT))
            r_reference_comparison
            if (not disable_output) _push( IsNot(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
            _cur_t = _previous_cur_t
            return 0
          else
            r_reference_comparison
            if (not disable_output) _push( Is(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_INSTANCE_OF)
        temporarily _cur_t = _on_t
          r_type
          if (not disable_output) _push( InstanceOf(_cur_t,_node_arg(-2),_node_arg(-1)->(as Type)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_IS_TYPE)
        temporarily _cur_t = _on_t
          r_type
          if (not disable_output) _push( IsType(_cur_t,_node_arg(-2),_node_arg(-1)->(as Type)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_NOT)
        temporarily _cur_t = _on_t
          if (_consume(TokenType.KEYWORD_INSTANCE_OF))
            r_type
            if (not disable_output) _push( NotInstanceOf(_cur_t,_node_arg(-2),_node_arg(-1)->(as Type)), 2 )
            _cur_t = _previous_cur_t
            return 0
          elseIf (_consume(TokenType.KEYWORD_IS_TYPE))
            r_type
            if (not disable_output) _push( NotIsType(_cur_t,_node_arg(-2),_node_arg(-1)->(as Type)), 2 )
            _cur_t = _previous_cur_t
            return 0
          else
            _throw_syntax_error("'instanceOf' or 'isType' expected.")
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_range->Int
      local _previous_cur_t = _cur_t
      r_bitwise_xor
      if (_next_t.type == TokenType.SYMBOL_DOTDOT)
        temporarily _cur_t = _on_t
          r_expression
          if (_consume_content("step"))
            r_expression
          else
            if (not disable_output) _push( null, 0 )
          endIf
          if (not disable_output) _push( CreateRangeUpTo(_cur_t,_node_arg(-3),_node_arg(-2),_node_arg(-1)), 3 )
        endTemporarily
      elseIf (_next_t.type == TokenType.SYMBOL_DOTDOTLT)
        temporarily _cur_t = _on_t
          r_expression
          if (_consume_content("step"))
            r_expression
          else
            if (not disable_output) _push( null, 0 )
          endIf
          if (not disable_output) _push( CreateRangeUpToLessThan(_cur_t,_node_arg(-3),_node_arg(-2),_node_arg(-1)), 3 )
        endTemporarily
      elseIf (_next_t.type == TokenType.SYMBOL_DOTDOTGT)
        temporarily _cur_t = _on_t
          r_expression
          if (_consume_content("step"))
            r_expression
          else
            if (not disable_output) _push( null, 0 )
          endIf
          if (not disable_output) _push( CreateRangeDownToGreaterThan(_cur_t,_node_arg(-3),_node_arg(-2),_node_arg(-1)), 3 )
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_DOWN_TO)
        temporarily _cur_t = _on_t
          r_expression
          if (_consume_content("step"))
            r_expression
          else
            if (not disable_output) _push( null, 0 )
          endIf
          if (not disable_output) _push( CreateRangeDownTo(_cur_t,_node_arg(-3),_node_arg(-2),_node_arg(-1)), 3 )
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_bitwise_xor->Int
      local _previous_cur_t = _cur_t
      r_bitwise_or
      r_bitwise_xor__inner
      _cur_t = _previous_cur_t
      return 0

    method r_bitwise_xor__inner->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_TILDE)
        temporarily _cur_t = _on_t
          _consume_eols
          r_bitwise_or
          if (not disable_output) _push( BitwiseXor(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_bitwise_xor__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_bitwise_or->Int
      local _previous_cur_t = _cur_t
      r_bitwise_and
      r_bitwise_or__inner
      _cur_t = _previous_cur_t
      return 0

    method r_bitwise_or__inner->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_VERTICAL_BAR)
        temporarily _cur_t = _on_t
          _consume_eols
          r_bitwise_and
          if (not disable_output) _push( BitwiseOr(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_bitwise_or__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_bitwise_and->Int
      local _previous_cur_t = _cur_t
      r_add_subtract
      r_bitwise_and__inner
      _cur_t = _previous_cur_t
      return 0

    method r_bitwise_and__inner->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_AMPERSAND)
        temporarily _cur_t = _on_t
          _consume_eols
          r_add_subtract
          if (not disable_output) _push( BitwiseAnd(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_bitwise_and__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_add_subtract->Int
      local _previous_cur_t = _cur_t
      r_bitwise_shift
      r_add_subtract__inner
      _cur_t = _previous_cur_t
      return 0

    method r_add_subtract__inner->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_PLUS)
        temporarily _cur_t = _on_t
          _consume_eols
          r_bitwise_shift
          if (not disable_output) _push( Add(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_add_subtract__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_MINUS)
        temporarily _cur_t = _on_t
          _consume_eols
          r_bitwise_shift
          if (not disable_output) _push( Subtract(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_add_subtract__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_bitwise_shift->Int
      local _previous_cur_t = _cur_t
      r_multiply_divide_mod
      r_bitwise_shift__inner
      _cur_t = _previous_cur_t
      return 0

    method r_bitwise_shift__inner->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_LEFT_SHIFT)
        temporarily _cur_t = _on_t
          _consume_eols
          r_multiply_divide_mod
          if (not disable_output) _push( BitShiftLeft(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_bitwise_shift__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_RIGHT_SHIFT)
        temporarily _cur_t = _on_t
          _consume_eols
          r_multiply_divide_mod
          if (not disable_output) _push( BitShiftRight(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_bitwise_shift__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_RIGHT_SHIFT_X)
        temporarily _cur_t = _on_t
          _consume_eols
          r_multiply_divide_mod
          if (not disable_output) _push( BitShiftRightX(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_bitwise_shift__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_multiply_divide_mod->Int
      local _previous_cur_t = _cur_t
      r_power
      r_multiply_divide_mod__inner
      _cur_t = _previous_cur_t
      return 0

    method r_multiply_divide_mod__inner->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_ASTERISK)
        temporarily _cur_t = _on_t
          _consume_eols
          r_power
          if (not disable_output) _push( Multiply(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_multiply_divide_mod__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_SLASH)
        temporarily _cur_t = _on_t
          _consume_eols
          r_power
          if (not disable_output) _push( Divide(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_multiply_divide_mod__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_PERCENT)
        temporarily _cur_t = _on_t
          _consume_eols
          r_power
          if (not disable_output) _push( Mod(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_multiply_divide_mod__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_power->Int
      local _previous_cur_t = _cur_t
      r_pre_unary
      r_power__inner
      _cur_t = _previous_cur_t
      return 0

    method r_power__inner->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_CARET)
        temporarily _cur_t = _on_t
          _consume_eols
          r_pre_unary
          if (not disable_output) _push( Power(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_power__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_pre_unary->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_BANG)
        temporarily _cur_t = _on_t
          _consume_eols
          r_pre_unary
          if (not disable_output) _push( BitwiseNot(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_NOT)
        temporarily _cur_t = _on_t
          _consume_eols
          r_pre_unary
          if (not disable_output) _push( LogicalNot(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_MINUS)
        temporarily _cur_t = _on_t
          _consume_eols
          r_pre_unary
          if (not disable_output) _push( Negate(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_PERCENT)
        temporarily _cur_t = _on_t
          _consume_eols
          r_pre_unary
          if (not disable_output) _push( Describe(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      r_post_unary
      _cur_t = _previous_cur_t
      return 0

    method r_post_unary->Int
      local _previous_cur_t = _cur_t
      r_access
      r_post_unary__inner
      _cur_t = _previous_cur_t
      return 0

    method r_post_unary__inner->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_QUESTION)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( Logicalize(_cur_t,_node_arg(-1)), 1 )
          r_post_unary__inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if ((_next_t.type == TokenType.SYMBOL_OPEN_PAREN))
        r_args
        r_create_InvokeContext
        r_access_inner
        _cur_t = _previous_cur_t
        return 0
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_access->Int
      local _previous_cur_t = _cur_t
      r_term
      r_access_inner
      _cur_t = _previous_cur_t
      return 0

    method r_access_inner->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_PERIOD)
        temporarily _cur_t = _on_t
          r_consume_eols
          if (_consume(TokenType.SYMBOL_OPEN_SQUARE))
            r_context_block
            r_access_inner
          else
            r_member_access
          endIf
        endTemporarily
      elseIf (_next_t.type == TokenType.SYMBOL_ARROW)
        temporarily _cur_t = _on_t
          if ((_next_t.type == TokenType.SYMBOL_OPEN_PAREN))
            _save_position
            _consume(TokenType.SYMBOL_OPEN_PAREN)
            if (_next_t.content and _next_t.content == "as")
              temporarily _cur_t = _on_t
                _discard_position
                r_type
                if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                if (not disable_output) _push( As(_cur_t,_node_arg(-2),_node_arg(-1)->(as Type)), 2 )
                r_access_inner
                _cur_t = _previous_cur_t
                return 0
              endTemporarily
            else
              _restore_position
            endIf
          else
            r_consume_eols
          endIf
          r_type
          if ((_next_t.type == TokenType.SYMBOL_OPEN_PAREN))
            r_args
            if (not disable_output) _push( ConvertToTypeWithArgs(_cur_t,_node_arg(-3),_node_arg(-2)->(as Type),_node_arg(-1)->(as Args)), 3 )
          else
            if (not disable_output) _push( ConvertToType(_cur_t,_node_arg(-2),_node_arg(-1)->(as Type)), 2 )
          endIf
          r_access_inner
        endTemporarily
      elseIf (_next_t.type == TokenType.SYMBOL_OPEN_SQUARE)
        temporarily _cur_t = _on_t
          r_consume_eols
          _save_position
          r_expression
          r_consume_eols
          if (_consume(TokenType.SYMBOL_CLOSE_SQUARE))
            _discard_position
            if (not disable_output) _push( IndexedAccess(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          else
            _restore_position
            _begin_list
            r_expression
            r_consume_eols
            while ((not _consume(TokenType.SYMBOL_CLOSE_SQUARE)))
              _consume(TokenType.SYMBOL_COMMA)
              r_consume_eols
              r_expression
              r_consume_eols
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( CmdList(_list_t) )
            if (not disable_output) _push( ListIndexedAccess(_cur_t,_node_arg(-2),_node_arg(-1)->(as Args)), 2 )
          endIf
          r_access_inner
        endTemporarily
      elseIf (_next_t.type == TokenType.SYMBOL_SLASH_SLASH)
        temporarily _cur_t = _on_t
          r_consume_eols
          if (_next_t.type == TokenType.IDENTIFIER)
            temporarily _cur_t = _on_t
              if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
            endTemporarily
          else
            r_identifier
          endIf
          if (not disable_output) _push( IndexedAccess(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          r_access_inner
        endTemporarily
      elseIf (_next_t.type == TokenType.SYMBOL_DOT_OPEN_SQUARE)
        temporarily _cur_t = _on_t
          r_context_block
        endTemporarily
      elseIf (_next_t.type == TokenType.SYMBOL_FAT_ARROW)
        temporarily _cur_t = _on_t
          r_consume_eols
          r_identifier
          if ((_next_t.type == TokenType.SYMBOL_OPEN_PAREN))
            r_function_param_types
          else
            if (not disable_output) _push( null, 0 )
          endIf
          if (not disable_output) _push( CallbackFunction(_cur_t,_node_arg(-3),_string_arg(-2),_node_arg(-1)->(as TypeList)), 3 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.SYMBOL_OPEN_SQUARE_GT)
        temporarily _cur_t = _on_t
          r_consume_eols
          _begin_list
          r_expression
          if (disable_output)     _discard_list
          else                    _push_list( Args(_list_t) )
          r_consume_eols
          if (not _consume(TokenType.SYMBOL_CLOSE_SQUARE)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_SQUARE )
          if (not disable_output) _push( ContextAccess(_cur_t,_node_arg(-2),"set_state",_node_arg(-1)->(as Args)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_context_block->Int
      local _previous_cur_t = _cur_t
      r_consume_eols
      if (_consume(TokenType.SYMBOL_CLOSE_SQUARE))
        r_access_inner
        _cur_t = _previous_cur_t
        return 0
      endIf
      _begin_list
      r_context_block_command
      r_consume_eols
      while ((_consume(TokenType.SYMBOL_COMMA) or ((_position < _limit) and (not (_next_t.type == TokenType.SYMBOL_CLOSE_SQUARE)))))
        r_context_block_command
        r_consume_eols
      endWhile
      if (not _consume(TokenType.SYMBOL_CLOSE_SQUARE)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_SQUARE )
      if (disable_output)     _discard_list
      else                    _push_list( CmdList(_list_t) )
      if (not disable_output) _push( ContextCommandBlock(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      r_access_inner
      _cur_t = _previous_cur_t
      return 0

    method r_member_access->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_AT)
        temporarily _cur_t = _on_t
          r_identifier
          if (not disable_output) _push( ContextDirectAccess(_cur_t,_node_arg(-2),_string_arg(-1)), 2 )
        endTemporarily
      else
        r_procedure_name
        r_access_args
        if (not disable_output) _push( ContextAccess(_cur_t,_node_arg(-3),_string_arg(-2),_node_arg(-1)->(as Args)), 3 )
      endIf
      r_access_inner
      _cur_t = _previous_cur_t
      return 0

    method r_context_block_command->Int
      local _previous_cur_t = _cur_t
      if (not disable_output) _push( ContextBlockContext(_cur_t), 0 )
      r_procedure_name
      r_access_args
      if (not disable_output) _push( ContextAccess(_cur_t,_node_arg(-3),_string_arg(-2),_node_arg(-1)->(as Args)), 3 )
      r_access_inner
      if (_next_t.type == TokenType.SYMBOL_EQUALS)
        temporarily _cur_t = _on_t
          r_expression
          if (not disable_output) _push( Assign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_term->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.STRING)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
          while ((_next_t.type == TokenType.STRING))
            if (_next_t.type == TokenType.STRING)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
              endTemporarily
            endIf
          endWhile
          if ((_next_t.type == TokenType.SYMBOL_OPEN_PAREN))
            r_args
            if (not disable_output) _push( FormattedString(_cur_t,_string_arg(-2),_node_arg(-1)->(as Args)), 2 )
            _cur_t = _previous_cur_t
            return 0
          endIf
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.INTEGER)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralInteger(_cur_t,_cur_t.content,_string_to_Int("10")), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.HEX_INTEGER)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralInteger(_cur_t,_cur_t.content,_string_to_Int("16")), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.BINARY_INTEGER)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralInteger(_cur_t,_cur_t.content,_string_to_Int("2")), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.OCTAL_INTEGER)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralInteger(_cur_t,_cur_t.content,_string_to_Int("8")), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.REAL_NUMBER)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralReal(_cur_t,_string_to_Real(_cur_t.content)), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.CHARACTER)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralCharacter(_cur_t,_string_to_Character(_cur_t.content)), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_AT)
        temporarily _cur_t = _on_t
          r_scoped_name
          if (not disable_output) _push( DirectAccess(_cur_t,_string_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "operator")
        temporarily _cur_t = _next_t
          r_procedure_name
          r_access_args
          if (not disable_output) _push( Access(_cur_t,_string_arg(-2),_node_arg(-1)->(as Args)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.IDENTIFIER)
        temporarily _cur_t = _next_t
          r_scoped_name
          if ((_next_t.type == TokenType.SYMBOL_EMPTY_SQUARE_BRACKETS))
            r_remaining_type
            r_type_access_or_typed_literal_list
            _cur_t = _previous_cur_t
            return 0
          elseIf ((_next_t.type == TokenType.SYMBOL_QUESTION))
            if (_next_t.type == TokenType.SYMBOL_QUESTION)
              temporarily _cur_t = _on_t
                if ((((_next_t.type == TokenType.SYMBOL_OPEN_PAREN) or (_next_t.type == TokenType.SYMBOL_QUESTION)) or (_next_t.type == TokenType.SYMBOL_EMPTY_SQUARE_BRACKETS)))
                  if (not disable_output) _push( Type(_cur_t,_string_arg(-1)), 1 )
                  if (not disable_output) _push( Type(_cur_t,_node_arg(-1)->(as Type),_string_to_Logical("true")), 1 )
                  r_list_or_optional_type
                  r_type_access_or_typed_literal_list
                  _cur_t = _previous_cur_t
                  return 0
                else
                  if (not disable_output) _push( null, 0 )
                  if (not disable_output) _push( Access(_cur_t,_string_arg(-2),_node_arg(-1)->(as Args)), 2 )
                  if (not disable_output) _push( Logicalize(_cur_t,_node_arg(-1)), 1 )
                  _cur_t = _previous_cur_t
                  return 0
                endIf
              endTemporarily
            endIf
          else
            r_access_args
            if (not disable_output) _push( Access(_cur_t,_string_arg(-2),_node_arg(-1)->(as Args)), 2 )
            r_subclass
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      endIf
      if (_next_t.type == TokenType.PLACEHOLDER)
        temporarily _cur_t = _next_t
          r_id_or_type
          r_access_args
          if (not disable_output) _push( Access(_cur_t,_string_arg(-2),_node_arg(-1)->(as Args)), 2 )
          r_subclass
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_TRUE)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralLogical(_cur_t,_string_to_Logical("true")), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_FALSE)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralLogical(_cur_t,_string_to_Logical("false")), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_NULL)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralNull(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_PI)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralPi(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_PRIOR)
        temporarily _cur_t = _on_t
          if (_consume(TokenType.SYMBOL_LTLT))
            r_type
            if (not _consume(TokenType.SYMBOL_GTGT)) _throw_syntax_error( &expected=TokenType.SYMBOL_GTGT )
          else
            if (not disable_output) _push( null, 0 )
          endIf
          if (not _consume(TokenType.SYMBOL_PERIOD)) _throw_syntax_error( &expected=TokenType.SYMBOL_PERIOD )
          r_identifier
          if ((_next_t.type == TokenType.SYMBOL_OPEN_PAREN))
            r_access_args
          else
            if (not disable_output) _push( null, 0 )
          endIf
          if (not disable_output) _push( CallPriorMethod(_cur_t,_node_arg(-3)->(as Type),_string_arg(-2),_node_arg(-1)->(as Args)), 3 )
          r_access_inner
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_THIS)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( This(_cur_t), 0 )
          if ((_next_t.type == TokenType.SYMBOL_OPEN_PAREN))
            if (not disable_output) _push( Identifier(_cur_t,"call"), 0 )
            r_args
            if (not disable_output) _push( ContextAccess(_cur_t,_node_arg(-3),_string_arg(-2),_node_arg(-1)->(as Args)), 3 )
            _cur_t = _previous_cur_t
            return 0
          endIf
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_WHICH)
        temporarily _cur_t = _next_t
          r_inline_which
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_OPEN_PAREN)
        temporarily _cur_t = _next_t
          _save_position
          if (_next_t.type == TokenType.SYMBOL_OPEN_PAREN)
            temporarily _cur_t = _on_t
              if (_next_t.type == TokenType.KEYWORD_FUNCTION_TYPE)
                temporarily _cur_t = _on_t
                  _restore_position
                  r_type
                  r_list_or_optional_type
                  r_access_args
                  if (not disable_output) _push( TypeAccess(_cur_t,_node_arg(-2)->(as Type),_node_arg(-1)->(as Args)), 2 )
                  _cur_t = _previous_cur_t
                  return 0
                endTemporarily
              endIf
            endTemporarily
          endIf
          _restore_position
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_OPEN_PAREN)
        temporarily _cur_t = _next_t
          _save_position
          if (_next_t.type == TokenType.SYMBOL_OPEN_PAREN)
            temporarily _cur_t = _on_t
              r_consume_eols
              if (_next_t.type == TokenType.SYMBOL_CLOSE_PAREN)
                temporarily _cur_t = _on_t
                  _discard_position
                  _begin_list
                  if (disable_output)     _discard_list
                  else                    _push_list( IDList(_list_t) )
                  r_remaining_generic_function_definition
                  _cur_t = _previous_cur_t
                  return 0
                endTemporarily
              else
                r_expression
                r_consume_eols
                if (_consume(TokenType.SYMBOL_CLOSE_PAREN))
                  if ((not (_next_t.type == TokenType.SYMBOL_FAT_ARROW)))
                    _discard_position
                    _cur_t = _previous_cur_t
                    return 0
                  endIf
                endIf
                _restore_position
                _consume(TokenType.SYMBOL_OPEN_PAREN)
                r_consume_eols
                _begin_list
                r_identifier
                r_consume_eols
                while (_consume(TokenType.SYMBOL_COMMA))
                  r_identifier
                  r_consume_eols
                endWhile
                if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                if (disable_output)     _discard_list
                else                    _push_list( IDList(_list_t) )
                r_remaining_generic_function_definition
                _cur_t = _previous_cur_t
                return 0
              endIf
            endTemporarily
          endIf
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_OPEN_SQUARE)
        temporarily _cur_t = _next_t
          _save_position
          _consume(TokenType.SYMBOL_OPEN_SQUARE)
          r_consume_eols
          r_expression
          if ((_next_t.type == TokenType.SYMBOL_COLON))
            _restore_position
            r_type
            if ((_next_t.type == TokenType.SYMBOL_OPEN_CURLY))
              r_literal_table
              if (not disable_output) _push( TypedLiteralTable(_cur_t,_node_arg(-2)->(as Type),_node_arg(-1)->(as KeyValuePairList)), 2 )
            else
              r_access_args
              if (not disable_output) _push( TypeAccess(_cur_t,_node_arg(-2)->(as Type),_node_arg(-1)->(as Args)), 2 )
            endIf
            _cur_t = _previous_cur_t
            return 0
          else
            _restore_position
            r_literal_list
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_OPEN_CURLY)
        temporarily _cur_t = _next_t
          r_literal_table
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_EMPTY_SQUARE_BRACKETS)
        temporarily _cur_t = _on_t
          _begin_list
          if (disable_output)     _discard_list
          else                    _push_list( LiteralList(_list_t) )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_FOR_EACH)
        temporarily _cur_t = _next_t
          r_inline_forEach
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_UNDEFINED)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralUndefined(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_FUNCTION)
        temporarily _cur_t = _next_t
          r_function_definition
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_OPEN_SQUARE_GT)
        temporarily _cur_t = _on_t
          _begin_list
          r_expression
          if (disable_output)     _discard_list
          else                    _push_list( Args(_list_t) )
          if (not _consume(TokenType.SYMBOL_CLOSE_SQUARE)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_SQUARE )
          if (not disable_output) _push( Access(_cur_t,"set_state",_node_arg(-1)->(as Args)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_NATIVE)
        temporarily _cur_t = _on_t
          r_native_code
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_VALUE_LIST)
        temporarily _cur_t = _on_t
          r_variant_list
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_VALUE_TABLE)
        temporarily _cur_t = _on_t
          r_variant_table
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_DOLLAR)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( GenericFnArg(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.GENERIC_FN_ARG)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( GenericFnArg(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.META_DEFAULT_VALUE)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_LTLT)) _throw_syntax_error( &expected=TokenType.SYMBOL_LTLT )
          r_type
          if (not _consume(TokenType.SYMBOL_GTGT)) _throw_syntax_error( &expected=TokenType.SYMBOL_GTGT )
          if (not disable_output) _push( DefaultValue(_cur_t,_node_arg(-1)->(as Type)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_THIS_TYPE)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( Type(_cur_t,"ThisType"), 0 )
          if (not disable_output) _push( TypeContext(_cur_t,_node_arg(-1)->(as Type)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_FUNCTION_TYPE)
        temporarily _cur_t = _next_t
          r_type
          r_optional_args
          if (not disable_output) _push( TypeAccess(_cur_t,_node_arg(-2)->(as Type),_node_arg(-1)->(as Args)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_LTLT)
        temporarily _cur_t = _on_t
          r_type
          if (not _consume(TokenType.SYMBOL_GTGT)) _throw_syntax_error( &expected=TokenType.SYMBOL_GTGT )
          if (not disable_output) _push( GetTypeInfo(_cur_t,_node_arg(-1)->(as Type)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_NEW)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_LTLT)) _throw_syntax_error( &expected=TokenType.SYMBOL_LTLT )
          r_expression
          if (not _consume(TokenType.SYMBOL_GTGT)) _throw_syntax_error( &expected=TokenType.SYMBOL_GTGT )
          r_args
          if (not disable_output) _push( New(_cur_t,_node_arg(-2),_node_arg(-1)->(as Args)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.META_IS_COMPOUND)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_LTLT)) _throw_syntax_error( &expected=TokenType.SYMBOL_LTLT )
          r_type
          if (not _consume(TokenType.SYMBOL_GTGT)) _throw_syntax_error( &expected=TokenType.SYMBOL_GTGT )
          if (not disable_output) _push( IsCompound(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.META_IS_ENUM)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_LTLT)) _throw_syntax_error( &expected=TokenType.SYMBOL_LTLT )
          r_type
          if (not _consume(TokenType.SYMBOL_GTGT)) _throw_syntax_error( &expected=TokenType.SYMBOL_GTGT )
          if (not disable_output) _push( IsEnum(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.META_IS_PRIMITIVE)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_LTLT)) _throw_syntax_error( &expected=TokenType.SYMBOL_LTLT )
          r_type
          if (not _consume(TokenType.SYMBOL_GTGT)) _throw_syntax_error( &expected=TokenType.SYMBOL_GTGT )
          if (not disable_output) _push( IsPrimitive(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.META_IS_REFERENCE)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_LTLT)) _throw_syntax_error( &expected=TokenType.SYMBOL_LTLT )
          r_type
          if (not _consume(TokenType.SYMBOL_GTGT)) _throw_syntax_error( &expected=TokenType.SYMBOL_GTGT )
          if (not disable_output) _push( IsReference(_cur_t,_node_arg(-1)), 1 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.META_FILE_BYTES)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_OPEN_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_OPEN_PAREN )
          r_string
          if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.META_FILE_STRING)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_OPEN_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_OPEN_PAREN )
          r_string
          if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.META_EXISTS)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_LTLT)) _throw_syntax_error( &expected=TokenType.SYMBOL_LTLT )
          r_expression
          if (not disable_output) _push( CommandExists(_cur_t,_node_arg(-1)), 1 )
          if (not _consume(TokenType.SYMBOL_GTGT)) _throw_syntax_error( &expected=TokenType.SYMBOL_GTGT )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _throw_syntax_error
      _cur_t = _previous_cur_t
      return 0

    method r_create_InvokeContext->Int
      local _previous_cur_t = _cur_t
      if (not disable_output) _push( InvokeContext(_cur_t,_node_arg(-2),_node_arg(-1)->(as Args)), 2 )
      _cur_t = _previous_cur_t
      return 0

    method r_variant_expression->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_OPEN_CURLY)
        temporarily _cur_t = _on_t
          r_variant_table
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_OPEN_SQUARE)
        temporarily _cur_t = _on_t
          r_variant_list
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_EMPTY_SQUARE_BRACKETS)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( EmptyVariantList(_cur_t), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      r_expression
      _cur_t = _previous_cur_t
      return 0

    method r_variant_list->Int
      local _previous_cur_t = _cur_t
      r_consume_eols
      if (_consume(TokenType.SYMBOL_CLOSE_SQUARE))
        if (not disable_output) _push( EmptyVariantList(_cur_t), 0 )
        _cur_t = _previous_cur_t
        return 0
      endIf
      _begin_list
      r_variant_expression
      r_consume_eols
      while ((_consume(TokenType.SYMBOL_COMMA) or (not (_next_t.type == TokenType.SYMBOL_CLOSE_SQUARE))))
        r_consume_eols
        r_variant_expression
        r_consume_eols
      endWhile
      if (not _consume(TokenType.SYMBOL_CLOSE_SQUARE)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_SQUARE )
      if (disable_output)     _discard_list
      else                    _push_list( Args(_list_t) )
      if (not disable_output) _push( VariantList(_cur_t,_node_arg(-1)->(as Args)), 1 )
      _cur_t = _previous_cur_t
      return 0

    method r_variant_table->Int
      local _previous_cur_t = _cur_t
      r_consume_eols
      if (_consume(TokenType.SYMBOL_CLOSE_CURLY))
        if (not disable_output) _push( EmptyVariantTable(_cur_t), 0 )
        _cur_t = _previous_cur_t
        return 0
      endIf
      _begin_list
      r_variant_key_value_pair
      r_consume_eols
      while ((_consume(TokenType.SYMBOL_COMMA) or (not (_next_t.type == TokenType.SYMBOL_CLOSE_CURLY))))
        r_variant_key_value_pair
      endWhile
      if (not _consume(TokenType.SYMBOL_CLOSE_CURLY)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_CURLY )
      if (disable_output)     _discard_list
      else                    _push_list( KeyValuePairList(_list_t) )
      if (not disable_output) _push( VariantTable(_cur_t,_node_arg(-1)->(as KeyValuePairList)), 1 )
      _cur_t = _previous_cur_t
      return 0

    method r_variant_key_value_pair->Int
      local _previous_cur_t = _cur_t
      r_consume_eols
      if (_consume(TokenType.SYMBOL_COLON))
        if (_next_t.type == TokenType.IDENTIFIER)
          temporarily _cur_t = _on_t
            if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
            if (not disable_output) _push( null, 0 )
            if (not disable_output) _push( Access(_cur_t,_cur_t.content,_node_arg(-1)->(as Args)), 1 )
          endTemporarily
        elseIf (_next_t.type == TokenType.STRING)
          temporarily _cur_t = _on_t
            if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
            output.[ print("FIXME"), println ]
            _on_output_line
          endTemporarily
        else
          _throw_syntax_error("Identifier or literal string expected.")
          _cur_t = _previous_cur_t
          return 0
        endIf
      else
        if (_next_t.type == TokenType.IDENTIFIER)
          temporarily _cur_t = _on_t
            if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
          endTemporarily
        else
          r_variant_expression
        endIf
        r_consume_eols
        if (not _consume(TokenType.SYMBOL_COLON)) _throw_syntax_error( &expected=TokenType.SYMBOL_COLON )
        r_consume_eols
        r_variant_expression
      endIf
      if (not disable_output) _push( KeyValuePair(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      r_consume_eols
      _cur_t = _previous_cur_t
      return 0

    method r_type_access_or_typed_literal_list->Int
      local _previous_cur_t = _cur_t
      if ((_next_t.type == TokenType.SYMBOL_OPEN_SQUARE))
        r_remaining_typed_literal_list
      else
        r_access_args
        if (not disable_output) _push( TypeAccess(_cur_t,_node_arg(-2)->(as Type),_node_arg(-1)->(as Args)), 2 )
        r_subclass
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_remaining_generic_function_definition->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_WITH)
        temporarily _cur_t = _next_t
          r_with_values
        endTemporarily
      else
        if (not disable_output) _push( null, 0 )
      endIf
      if (not _consume(TokenType.SYMBOL_FAT_ARROW)) _throw_syntax_error( &expected=TokenType.SYMBOL_FAT_ARROW )
      r_single_line_statements
      if (not disable_output) _push( GenericFunctionDefinition(_cur_t,_node_arg(-3)->(as IDList),_node_arg(-2)->(as WithValues),_node_arg(-1)), 3 )
      _cur_t = _previous_cur_t
      return 0

    method r_native_code->Int
      local _previous_cur_t = _cur_t
      if (_consume(TokenType.SYMBOL_OPEN_PAREN))
        r_string
        if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
      else
        r_consume_eols
        r_string
      endIf
      if (_consume(TokenType.SYMBOL_ARROW))
        r_type
        if (not disable_output) _push( NativeExpression(_cur_t,_string_arg(-2),_node_arg(-1)->(as Type)), 2 )
        _cur_t = _previous_cur_t
        return 0
      else
        if (not disable_output) _push( NativeStatement(_cur_t,_string_arg(-1)), 1 )
        _cur_t = _previous_cur_t
        return 0
      endIf

    method r_literal_list->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_OPEN_SQUARE)
        temporarily _cur_t = _on_t
          _begin_list
          r_consume_eols
          if (_consume(TokenType.SYMBOL_CLOSE_SQUARE))
            if (disable_output)     _discard_list
            else                    _push_list( LiteralList(_list_t) )
            _cur_t = _previous_cur_t
            return 0
          endIf
          r_expression
          r_consume_eols
          while ((not (_next_t.type == TokenType.SYMBOL_CLOSE_SQUARE)))
            if (_consume(TokenType.SYMBOL_COMMA))
              r_consume_eols
            endIf
            r_expression
            r_consume_eols
          endWhile
          if (not _consume(TokenType.SYMBOL_CLOSE_SQUARE)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_SQUARE )
          if (disable_output)     _discard_list
          else                    _push_list( LiteralList(_list_t) )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_remaining_typed_literal_list->Int
      local _previous_cur_t = _cur_t
      r_literal_list
      if (not disable_output) _push( TypedLiteralList(_cur_t,_node_arg(-2)->(as Type),_node_arg(-1)), 2 )
      _cur_t = _previous_cur_t
      return 0

    method r_literal_table->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_OPEN_CURLY)
        temporarily _cur_t = _on_t
          _begin_list
          r_consume_eols
          if (_consume(TokenType.SYMBOL_CLOSE_CURLY))
            if (disable_output)     _discard_list
            else                    _push_list( KeyValuePairList(_list_t) )
            _cur_t = _previous_cur_t
            return 0
          endIf
          r_literal_table_entry
          r_consume_eols
          while ((not (_next_t.type == TokenType.SYMBOL_CLOSE_CURLY)))
            if (_consume(TokenType.SYMBOL_COMMA))
              r_consume_eols
            endIf
            r_literal_table_entry
            r_consume_eols
          endWhile
          if (not _consume(TokenType.SYMBOL_CLOSE_CURLY)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_CURLY )
          if (disable_output)     _discard_list
          else                    _push_list( KeyValuePairList(_list_t) )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_literal_table_entry->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.IDENTIFIER)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
        endTemporarily
      else
        r_expression
      endIf
      if (not _consume(TokenType.SYMBOL_COLON)) _throw_syntax_error( &expected=TokenType.SYMBOL_COLON )
      r_expression
      if (not disable_output) _push( KeyValuePair(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      _cur_t = _previous_cur_t
      return 0

    method r_preprocess->Int
      local _previous_cur_t = _cur_t
      while ((_position < _limit))
        r_process_another
      endWhile
      if (not disable_output) _push( null, 0 )
      _cur_t = _previous_cur_t
      return 0

    method r_process_another->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.META_DEFINE)
        temporarily _cur_t = _on_t
          if (_next_t.type == TokenType.IDENTIFIER)
            temporarily _cur_t = _on_t
              buffer.clear
              buffer.print ""
              while (((_position < _limit) and (not (_next_t.type == TokenType.EOL))))
              endWhile
            endTemporarily
          else
            _throw_syntax_error("Identifier expected.")
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      elseIf (_next_t.type == TokenType.META_JOIN_IDS)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_OPEN_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_OPEN_PAREN )
          r_process_another
          while ((_consume(TokenType.SYMBOL_COMMA) or (not (_next_t.type == TokenType.SYMBOL_CLOSE_PAREN))))
            r_process_another
          endWhile
          if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.META_INCLUDE)
        temporarily _cur_t = _on_t
          r_collect_meta_filepath
          include_attribute_api = false
          include_attribute_folder = false
          include_attribute_optional = false
          r_include_attributes
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.META_INCLUDE_FOLDER)
        temporarily _cur_t = _on_t
          r_collect_meta_filepath
          include_attribute_api = false
          include_attribute_folder = true
          include_attribute_optional = false
          r_include_attributes
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.META_IS_DEFINED)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_OPEN_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_OPEN_PAREN )
          if (_next_t.type == TokenType.IDENTIFIER)
            temporarily _cur_t = _on_t
            endTemporarily
          else
            _throw_syntax_error("Identifier expected.")
            _cur_t = _previous_cur_t
            return 0
          endIf
          if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.META_LOCAL_DEFINE)
        temporarily _cur_t = _on_t
          if (_next_t.type == TokenType.IDENTIFIER)
            temporarily _cur_t = _on_t
              buffer.clear
              buffer.print ""
              while (((_position < _limit) and (not (_next_t.type == TokenType.EOL))))
              endWhile
            endTemporarily
          else
            _throw_syntax_error("Identifier expected.")
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      elseIf (_next_t.type == TokenType.META_LOCAL_MACRO)
        temporarily _cur_t = _on_t
          r_identifier
          if (not _consume(TokenType.SYMBOL_LTLT)) _throw_syntax_error( &expected=TokenType.SYMBOL_LTLT )
          _begin_list
          r_placeholder
          while (_consume(TokenType.SYMBOL_COMMA))
            r_placeholder
          endWhile
          if (disable_output)     _discard_list
          else                    _push_list( Placeholders(_list_t) )
          if (not _consume(TokenType.SYMBOL_GTGT)) _throw_syntax_error( &expected=TokenType.SYMBOL_GTGT )
          if ((_next_t.type == TokenType.EOL))
            r_consume_eols
            _save_position
            while (((_position < _limit) and (not (_next_t.type == TokenType.META_END_LOCAL_MACRO))))
              _read
            endWhile
            if (disable_output) _discard_position
            else                _create_token_list
            if (not _consume(TokenType.META_END_LOCAL_MACRO)) _throw_syntax_error( &expected=TokenType.META_END_LOCAL_MACRO )
          else
            _save_position
            while (((_position < _limit) and (not (_next_t.type == TokenType.EOL))))
              _read
            endWhile
            if (disable_output) _discard_position
            else                _create_token_list
            r_consume_eols
          endIf
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.META_LOWERCASE)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_OPEN_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_OPEN_PAREN )
          r_process_another
          while ((_consume(TokenType.SYMBOL_COMMA) or (not (_next_t.type == TokenType.SYMBOL_CLOSE_PAREN))))
            r_process_another
          endWhile
          if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.META_MACRO)
        temporarily _cur_t = _on_t
          r_identifier
          if (not _consume(TokenType.SYMBOL_LTLT)) _throw_syntax_error( &expected=TokenType.SYMBOL_LTLT )
          _begin_list
          r_placeholder
          while (_consume(TokenType.SYMBOL_COMMA))
            r_placeholder
          endWhile
          if (disable_output)     _discard_list
          else                    _push_list( Placeholders(_list_t) )
          if (not _consume(TokenType.SYMBOL_GTGT)) _throw_syntax_error( &expected=TokenType.SYMBOL_GTGT )
          if ((_next_t.type == TokenType.EOL))
            r_consume_eols
            _save_position
            while (((_position < _limit) and (not (_next_t.type == TokenType.META_END_MACRO))))
              _read
            endWhile
            if (disable_output) _discard_position
            else                _create_token_list
            if (not _consume(TokenType.META_END_MACRO)) _throw_syntax_error( &expected=TokenType.META_END_MACRO )
          else
            _save_position
            while (((_position < _limit) and (not (_next_t.type == TokenType.EOL))))
              _read
            endWhile
            if (disable_output) _discard_position
            else                _create_token_list
            r_consume_eols
          endIf
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_MODULE)
        temporarily _cur_t = _on_t
          _save_position
          _restore_position
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.META_REQUIRE_ROGUE)
        temporarily _cur_t = _on_t
          if (_next_t.type == TokenType.STRING)
            temporarily _cur_t = _on_t
              _cur_t = _previous_cur_t
              return 0
            endTemporarily
          else
            _throw_syntax_error("Expected a literal string containing a version number.")
            _cur_t = _previous_cur_t
            return 0
          endIf
        endTemporarily
      elseIf (_next_t.type == TokenType.META_ROGUE_VERSION)
        temporarily _cur_t = _on_t
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.META_SOURCE_FILEPATH)
        temporarily _cur_t = _on_t
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.META_SOURCE_LINE)
        temporarily _cur_t = _on_t
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.META_TARGET)
        temporarily _cur_t = _on_t
          if (_next_t.type == TokenType.SYMBOL_OPEN_PAREN)
            temporarily _cur_t = _on_t
              if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
            endTemporarily
          else
          endIf
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.META_THIS_MODULE)
        temporarily _cur_t = _on_t
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.META_JOIN_STRINGS)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_OPEN_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_OPEN_PAREN )
          r_process_another
          while ((_consume(TokenType.SYMBOL_COMMA) or (not (_next_t.type == TokenType.SYMBOL_CLOSE_PAREN))))
            r_process_another
          endWhile
          if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.META_UPPERCASE)
        temporarily _cur_t = _on_t
          if (not _consume(TokenType.SYMBOL_OPEN_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_OPEN_PAREN )
          r_process_another
          while ((_consume(TokenType.SYMBOL_COMMA) or (not (_next_t.type == TokenType.SYMBOL_CLOSE_PAREN))))
            r_process_another
          endWhile
          if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.KEYWORD_USES)
        temporarily _cur_t = _on_t
          r_collect_meta_filepath
          _save_position
          r_uses_attributes
          _restore_position
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      elseIf (_next_t.type == TokenType.IDENTIFIER)
        temporarily _cur_t = _on_t
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_include_attributes->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.SYMBOL_OPEN_SQUARE)
        temporarily _cur_t = _on_t
          while (((_position < _limit) and (not (_next_t.type == TokenType.SYMBOL_CLOSE_SQUARE))))
            r_include_attribute
            _consume(TokenType.SYMBOL_COMMA)
          endWhile
          if (not _consume(TokenType.SYMBOL_CLOSE_SQUARE)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_SQUARE )
        endTemporarily
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_include_attribute->Int
      local _previous_cur_t = _cur_t
      if (_next_t.content and _next_t.content == "folder")
        temporarily _cur_t = _on_t
          include_attribute_folder = true
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.content and _next_t.content == "optional")
        temporarily _cur_t = _on_t
          include_attribute_optional = true
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _throw_syntax_error("Illegal $include attribute. Expected one or more of [folder optional].")
      _cur_t = _previous_cur_t
      return 0

    method r_meta_expression->Int
      local _previous_cur_t = _cur_t
      r_meta_term
      _cur_t = _previous_cur_t
      return 0

    method r_meta_term->Int
      local _previous_cur_t = _cur_t
      if (_next_t.type == TokenType.KEYWORD_TRUE)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralLogical(_cur_t,_string_to_Logical("true")), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.KEYWORD_FALSE)
        temporarily _cur_t = _on_t
          if (not disable_output) _push( LiteralLogical(_cur_t,_string_to_Logical("false")), 0 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      if (_next_t.type == TokenType.SYMBOL_OPEN_PAREN)
        temporarily _cur_t = _on_t
          r_meta_expression
          if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      _throw_syntax_error("Invalid metacondition.")
      _cur_t = _previous_cur_t
      return 0

    method r_collect_meta_filepath->Int
      local _previous_cur_t = _cur_t
      buffer.clear
      buffer.print ""
      if (_next_t.type == TokenType.STRING)
        temporarily _cur_t = _on_t
        endTemporarily
      else
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_native_constructor_signature->Int
      local _previous_cur_t = _cur_t
      r_scoped_name
      r_native_method_parameters
      if (not disable_output) _push( NativeConstructorSignature(_cur_t,_string_arg(-2),_node_arg(-1)->(as NativeParameters)), 2 )
      _cur_t = _previous_cur_t
      return 0

    method r_native_method_signature->Int
      local _previous_cur_t = _cur_t
      r_scoped_name
      if (not _consume(TokenType.SYMBOL_PERIOD)) _throw_syntax_error( &expected=TokenType.SYMBOL_PERIOD )
      r_procedure_name
      if (_consume(TokenType.SYMBOL_LTLT))
        r_consume_eols
        _begin_list
        if (_consume(TokenType.SYMBOL_GTGT))
          if (disable_output)     _discard_list
          else                    _push_list( TypeList(_list_t) )
        else
          r_consume_eols
          r_type
          r_consume_eols
          while (_consume(TokenType.SYMBOL_COMMA))
            r_consume_eols
            r_type
            r_consume_eols
          endWhile
          if (not _consume(TokenType.SYMBOL_GTGT)) _throw_syntax_error( &expected=TokenType.SYMBOL_GTGT )
          if (disable_output)     _discard_list
          else                    _push_list( TypeList(_list_t) )
        endIf
        r_native_method_parameters
        r_procedure_return_type
        if (not disable_output) _push( NativeMethodSignature(_cur_t,_string_arg(-5),_string_arg(-4),_node_arg(-3)->(as TypeList),_node_arg(-2)->(as NativeParameters),_node_arg(-1)->(as Type)), 5 )
        _cur_t = _previous_cur_t
        return 0
      else
        r_native_method_parameters
        r_procedure_return_type
        if (not disable_output) _push( NativeMethodSignature(_cur_t,_string_arg(-4),_string_arg(-3),_node_arg(-2)->(as NativeParameters),_node_arg(-1)->(as Type)), 4 )
        _cur_t = _previous_cur_t
        return 0
      endIf

    method r_native_method_parameters->Int
      local _previous_cur_t = _cur_t
      _begin_list
      if ((not _consume(TokenType.SYMBOL_OPEN_PAREN)))
        if (disable_output)     _discard_list
        else                    _push_list( NativeParameters(_list_t) )
        _cur_t = _previous_cur_t
        return 0
      endIf
      r_consume_eols
      if (_consume(TokenType.SYMBOL_CLOSE_PAREN))
        if (disable_output)     _discard_list
        else                    _push_list( NativeParameters(_list_t) )
        _cur_t = _previous_cur_t
        return 0
      endIf
      r_consume_eols
      r_native_method_parameter
      r_consume_eols
      while (_consume(TokenType.SYMBOL_COMMA))
        r_native_method_parameter
        r_consume_eols
      endWhile
      if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
      if (disable_output)     _discard_list
      else                    _push_list( NativeParameters(_list_t) )
      _cur_t = _previous_cur_t
      return 0

    method r_native_method_parameter->Int
      local _previous_cur_t = _cur_t
      r_consume_eols
      if (_next_t.type == TokenType.SYMBOL_AMPERSAND)
        temporarily _cur_t = _on_t
          r_type
          if (not disable_output) _push( LiteralLogical(_cur_t,_string_to_Logical("false")), 0 )
          if (not disable_output) _push( NativeParameter(_cur_t,_node_arg(-2)->(as Type),_node_arg(-1)), 2 )
          _cur_t = _previous_cur_t
          return 0
        endTemporarily
      endIf
      r_type
      r_optional_native_parameter_default_value
      if (not disable_output) _push( NativeParameter(_cur_t,_node_arg(-2)->(as Type),_node_arg(-1)), 2 )
      _cur_t = _previous_cur_t
      return 0

    method r_optional_native_parameter_default_value->Int
      local _previous_cur_t = _cur_t
      if (_consume(TokenType.SYMBOL_EQUALS))
        r_consume_eols
        r_expression
      else
        if (not disable_output) _push( null, 0 )
      endIf
      _cur_t = _previous_cur_t
      return 0

    method r_additional_node_types->Int
      local _previous_cur_t = _cur_t
      if (not disable_output) _push( AddXY(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddReal(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddReal32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddReal64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddCharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddLogical(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractXY(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractReal(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractReal32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractReal64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractCharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractLogical(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyXY(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyReal(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyReal32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyReal64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyCharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyLogical(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideXY(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideReal(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideReal32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideReal64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideCharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideLogical(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModXY(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModReal(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModReal32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModReal64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModCharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModLogical(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerXY(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerReal(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerReal32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerReal64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerCharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerLogical(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndCharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndLogical(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrCharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorCharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftCharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightCharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXCharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( ControlStructure(_cur_t,_node_arg(-1)->(as Statements)), 1 )
      if (not disable_output) _push( Construct(_cur_t,_node_arg(-2)->(as Type),_node_arg(-1)->(as Args)), 2 )
      if (not disable_output) _push( CompareEQReal64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareNEReal64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLTReal64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLEReal64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGTReal64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGEReal64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareEQXY(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareNEXY(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLTXY(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLEXY(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGTXY(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGEXY(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareEQReal(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareNEReal(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLTReal(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLEReal(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGTReal(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGEReal(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareEQReal32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareNEReal32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLTReal32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLEReal32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGTReal32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGEReal32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareEQInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareNEInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLTInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLEInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGTInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGEInt64(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareEQInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareNEInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLTInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLEInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGTInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGEInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareEQInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareNEInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLTInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLEInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGTInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGEInt32(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareEQCharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareNECharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLTCharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLECharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGTCharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGECharacter(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareEQByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareNEByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLTByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLEByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGTByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGEByte(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareEQLogical(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareNELogical(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLTLogical(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareLELogical(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGTLogical(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( CompareGELogical(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( Else(_cur_t,_node_arg(-1)->(as Statements)), 1 )
      if (not disable_output) _push( ForEachElementInRangeUpToInt(_cur_t,_node_arg(-4)->(as Local),_node_arg(-3),_node_arg(-2),_node_arg(-1)->(as Statements)), 4 )
      if (not disable_output) _push( ConvertRealToReal64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal32ToReal64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt64ToReal64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertIntToReal64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt32ToReal64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertCharacterToReal64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertByteToReal64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertLogicalToReal64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal64ToReal(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal32ToReal(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt64ToReal(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertIntToReal(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt32ToReal(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertCharacterToReal(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertByteToReal(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertLogicalToReal(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal64ToReal32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertRealToReal32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt64ToReal32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertIntToReal32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt32ToReal32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertCharacterToReal32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertByteToReal32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertLogicalToReal32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal64ToInt64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertRealToInt64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal32ToInt64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertIntToInt64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt32ToInt64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertCharacterToInt64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertByteToInt64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertLogicalToInt64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal64ToInt(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertRealToInt(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal32ToInt(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt64ToInt(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt32ToInt(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertCharacterToInt(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertByteToInt(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertLogicalToInt(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal64ToInt32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertRealToInt32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal32ToInt32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt64ToInt32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertIntToInt32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertCharacterToInt32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertByteToInt32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertLogicalToInt32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal64ToCharacter(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertRealToCharacter(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal32ToCharacter(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt64ToCharacter(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertIntToCharacter(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt32ToCharacter(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertByteToCharacter(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertLogicalToCharacter(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal64ToByte(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertRealToByte(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal32ToByte(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt64ToByte(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertIntToByte(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt32ToByte(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertCharacterToByte(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertLogicalToByte(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal64ToLogical(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertRealToLogical(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertReal32ToLogical(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt64ToLogical(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertIntToLogical(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertInt32ToLogical(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertCharacterToLogical(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertByteToLogical(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( LiteralReal64(_cur_t,_real_arg(-1)), 1 )
      if (not disable_output) _push( LiteralReal32(_cur_t,_real_arg(-1)), 1 )
      if (not disable_output) _push( LiteralInt64(_cur_t,_int_arg(-1)), 1 )
      if (not disable_output) _push( LiteralInt32(_cur_t,_int_arg(-1)), 1 )
      if (not disable_output) _push( LiteralByte(_cur_t,_int_arg(-1)), 1 )
      if (not disable_output) _push( OpAndAssign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( OpAndAssignLocal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( OpAndAssignProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignGlobalProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignGlobalPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignGlobalPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignGlobalPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignGlobalPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignGlobalPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignGlobalPropertyLogical(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignGlobalPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignGlobalPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignGlobalPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignGlobalPropertyXY(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignLocal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignLocalByte(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignLocalCharacter(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignLocalInt(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignLocalInt32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignLocalInt64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignLocalLogical(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignLocalReal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignLocalReal32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignLocalReal64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignLocalXY(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignProperty(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( AddAndAssignPropertyByte(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( AddAndAssignPropertyCharacter(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( AddAndAssignPropertyInt(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( AddAndAssignPropertyInt32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( AddAndAssignPropertyInt64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( AddAndAssignPropertyLogical(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( AddAndAssignPropertyReal(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( AddAndAssignPropertyReal32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( AddAndAssignPropertyReal64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( AddAndAssignPropertyXY(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( AddAndAssignThisProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignThisPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignThisPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignThisPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignThisPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignThisPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignThisPropertyLogical(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignThisPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignThisPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignThisPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( AddAndAssignThisPropertyXY(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignGlobalProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignGlobalPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignGlobalPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignGlobalPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignGlobalPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignGlobalPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignGlobalPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignGlobalPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignGlobalPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignGlobalPropertyXY(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignLocal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignLocalByte(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignLocalCharacter(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignLocalInt(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignLocalInt32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignLocalInt64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignLocalReal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignLocalReal32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignLocalReal64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignLocalXY(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignProperty(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( SubtractAndAssignPropertyByte(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( SubtractAndAssignPropertyCharacter(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( SubtractAndAssignPropertyInt(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( SubtractAndAssignPropertyInt32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( SubtractAndAssignPropertyInt64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( SubtractAndAssignPropertyReal(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( SubtractAndAssignPropertyReal32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( SubtractAndAssignPropertyReal64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( SubtractAndAssignPropertyXY(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( SubtractAndAssignThisProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignThisPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignThisPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignThisPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignThisPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignThisPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignThisPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignThisPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignThisPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( SubtractAndAssignThisPropertyXY(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignGlobalProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignGlobalPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignGlobalPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignGlobalPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignGlobalPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignGlobalPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignGlobalPropertyLogical(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignGlobalPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignGlobalPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignGlobalPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignGlobalPropertyXY(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignLocal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignLocalByte(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignLocalCharacter(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignLocalInt(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignLocalInt32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignLocalInt64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignLocalLogical(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignLocalReal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignLocalReal32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignLocalReal64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignLocalXY(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignProperty(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( MultiplyAndAssignPropertyByte(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( MultiplyAndAssignPropertyCharacter(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( MultiplyAndAssignPropertyInt(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( MultiplyAndAssignPropertyInt32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( MultiplyAndAssignPropertyInt64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( MultiplyAndAssignPropertyLogical(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( MultiplyAndAssignPropertyReal(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( MultiplyAndAssignPropertyReal32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( MultiplyAndAssignPropertyReal64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( MultiplyAndAssignPropertyXY(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( MultiplyAndAssignThisProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignThisPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignThisPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignThisPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignThisPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignThisPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignThisPropertyLogical(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignThisPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignThisPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignThisPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( MultiplyAndAssignThisPropertyXY(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignGlobalProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignGlobalPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignGlobalPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignGlobalPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignGlobalPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignGlobalPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignGlobalPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignGlobalPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignGlobalPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignGlobalPropertyXY(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignLocal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignLocalByte(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignLocalCharacter(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignLocalInt(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignLocalInt32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignLocalInt64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignLocalReal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignLocalReal32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignLocalReal64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignLocalXY(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignProperty(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( DivideAndAssignPropertyByte(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( DivideAndAssignPropertyCharacter(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( DivideAndAssignPropertyInt(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( DivideAndAssignPropertyInt32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( DivideAndAssignPropertyInt64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( DivideAndAssignPropertyReal(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( DivideAndAssignPropertyReal32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( DivideAndAssignPropertyReal64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( DivideAndAssignPropertyXY(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( DivideAndAssignThisProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignThisPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignThisPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignThisPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignThisPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignThisPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignThisPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignThisPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignThisPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( DivideAndAssignThisPropertyXY(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignGlobalProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignGlobalPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignGlobalPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignGlobalPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignGlobalPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignGlobalPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignGlobalPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignGlobalPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignGlobalPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignGlobalPropertyXY(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignLocal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignLocalByte(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignLocalCharacter(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignLocalInt(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignLocalInt32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignLocalInt64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignLocalReal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignLocalReal32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignLocalReal64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignLocalXY(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignProperty(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( ModAndAssignPropertyByte(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( ModAndAssignPropertyCharacter(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( ModAndAssignPropertyInt(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( ModAndAssignPropertyInt32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( ModAndAssignPropertyInt64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( ModAndAssignPropertyReal(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( ModAndAssignPropertyReal32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( ModAndAssignPropertyReal64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( ModAndAssignPropertyXY(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( ModAndAssignThisProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignThisPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignThisPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignThisPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignThisPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignThisPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignThisPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignThisPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignThisPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( ModAndAssignThisPropertyXY(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignGlobalProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignGlobalPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignGlobalPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignGlobalPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignGlobalPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignGlobalPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignGlobalPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignGlobalPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignGlobalPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignGlobalPropertyXY(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignLocal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignLocalByte(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignLocalCharacter(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignLocalInt(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignLocalInt32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignLocalInt64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignLocalReal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignLocalReal32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignLocalReal64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignLocalXY(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignProperty(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( PowerAndAssignPropertyByte(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( PowerAndAssignPropertyCharacter(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( PowerAndAssignPropertyInt(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( PowerAndAssignPropertyInt32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( PowerAndAssignPropertyInt64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( PowerAndAssignPropertyReal(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( PowerAndAssignPropertyReal32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( PowerAndAssignPropertyReal64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( PowerAndAssignPropertyXY(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( PowerAndAssignThisProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignThisPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignThisPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignThisPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignThisPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignThisPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignThisPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignThisPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignThisPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerAndAssignThisPropertyXY(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignGlobalProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignGlobalPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignGlobalPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignGlobalPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignGlobalPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignGlobalPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignGlobalPropertyLogical(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignGlobalPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignGlobalPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignGlobalPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignLocal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignLocalByte(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignLocalCharacter(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignLocalInt(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignLocalInt32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignLocalInt64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignLocalLogical(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignLocalReal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignLocalReal32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignLocalReal64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignProperty(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseAndAndAssignPropertyByte(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseAndAndAssignPropertyCharacter(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseAndAndAssignPropertyInt(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseAndAndAssignPropertyInt32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseAndAndAssignPropertyInt64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseAndAndAssignPropertyLogical(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseAndAndAssignPropertyReal(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseAndAndAssignPropertyReal32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseAndAndAssignPropertyReal64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseAndAndAssignThisProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignThisPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignThisPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignThisPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignThisPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignThisPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignThisPropertyLogical(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignThisPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignThisPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseAndAndAssignThisPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignGlobalProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignGlobalPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignGlobalPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignGlobalPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignGlobalPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignGlobalPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignGlobalPropertyLogical(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignGlobalPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignGlobalPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignGlobalPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignLocal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignLocalByte(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignLocalCharacter(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignLocalInt(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignLocalInt32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignLocalInt64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignLocalLogical(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignLocalReal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignLocalReal32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignLocalReal64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignProperty(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseOrAndAssignPropertyByte(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseOrAndAssignPropertyCharacter(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseOrAndAssignPropertyInt(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseOrAndAssignPropertyInt32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseOrAndAssignPropertyInt64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseOrAndAssignPropertyLogical(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseOrAndAssignPropertyReal(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseOrAndAssignPropertyReal32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseOrAndAssignPropertyReal64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseOrAndAssignThisProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignThisPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignThisPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignThisPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignThisPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignThisPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignThisPropertyLogical(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignThisPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignThisPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseOrAndAssignThisPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignGlobalProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignGlobalPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignGlobalPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignGlobalPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignGlobalPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignGlobalPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignGlobalPropertyLogical(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignGlobalPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignGlobalPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignGlobalPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignLocal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignLocalByte(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignLocalCharacter(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignLocalInt(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignLocalInt32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignLocalInt64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignLocalLogical(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignLocalReal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignLocalReal32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignLocalReal64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignProperty(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseXorAndAssignPropertyByte(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseXorAndAssignPropertyCharacter(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseXorAndAssignPropertyInt(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseXorAndAssignPropertyInt32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseXorAndAssignPropertyInt64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseXorAndAssignPropertyLogical(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseXorAndAssignPropertyReal(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseXorAndAssignPropertyReal32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseXorAndAssignPropertyReal64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitwiseXorAndAssignThisProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignThisPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignThisPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignThisPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignThisPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignThisPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignThisPropertyLogical(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignThisPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignThisPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitwiseXorAndAssignThisPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignGlobalProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignGlobalPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignGlobalPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignGlobalPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignGlobalPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignGlobalPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignGlobalPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignGlobalPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignGlobalPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignLocal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignLocalByte(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignLocalCharacter(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignLocalInt(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignLocalInt32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignLocalInt64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignLocalReal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignLocalReal32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignLocalReal64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignProperty(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftLeftAndAssignPropertyByte(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftLeftAndAssignPropertyCharacter(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftLeftAndAssignPropertyInt(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftLeftAndAssignPropertyInt32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftLeftAndAssignPropertyInt64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftLeftAndAssignPropertyReal(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftLeftAndAssignPropertyReal32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftLeftAndAssignPropertyReal64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftLeftAndAssignThisProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignThisPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignThisPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignThisPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignThisPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignThisPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignThisPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignThisPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftLeftAndAssignThisPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignGlobalProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignGlobalPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignGlobalPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignGlobalPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignGlobalPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignGlobalPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignGlobalPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignGlobalPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignGlobalPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignLocal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignLocalByte(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignLocalCharacter(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignLocalInt(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignLocalInt32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignLocalInt64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignLocalReal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignLocalReal32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignLocalReal64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignProperty(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightAndAssignPropertyByte(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightAndAssignPropertyCharacter(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightAndAssignPropertyInt(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightAndAssignPropertyInt32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightAndAssignPropertyInt64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightAndAssignPropertyReal(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightAndAssignPropertyReal32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightAndAssignPropertyReal64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightAndAssignThisProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignThisPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignThisPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignThisPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignThisPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignThisPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignThisPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignThisPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightAndAssignThisPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignGlobalProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignGlobalPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignGlobalPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignGlobalPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignGlobalPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignGlobalPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignGlobalPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignGlobalPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignGlobalPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignLocal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignLocalByte(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignLocalCharacter(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignLocalInt(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignLocalInt32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignLocalInt64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignLocalReal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignLocalReal32(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignLocalReal64(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignProperty(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightXAndAssignPropertyByte(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightXAndAssignPropertyCharacter(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightXAndAssignPropertyInt(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightXAndAssignPropertyInt32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightXAndAssignPropertyInt64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightXAndAssignPropertyReal(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightXAndAssignPropertyReal32(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightXAndAssignPropertyReal64(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( BitShiftRightXAndAssignThisProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignThisPropertyByte(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignThisPropertyCharacter(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignThisPropertyInt(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignThisPropertyInt32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignThisPropertyInt64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignThisPropertyReal(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignThisPropertyReal32(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( BitShiftRightXAndAssignThisPropertyReal64(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( LogicalBinary(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( LogicalUnary(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( NativeProcedureSignature(_cur_t,_string_arg(-4),_string_arg(-3),_node_arg(-2)->(as NativeParameters),_node_arg(-1)->(as Type)), 4 )
      if (not disable_output) _push( PowerInt(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( PowerReal(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( Print(_cur_t,_node_arg(-1)->(as Args)), 1 )
      if (not disable_output) _push( Println(_cur_t,_node_arg(-1)->(as Args)), 1 )
      if (not disable_output) _push( ReadGlobalProperty(_cur_t,_node_arg(-1)->(as Property)), 1 )
      if (not disable_output) _push( ReadLocal(_cur_t,_node_arg(-1)->(as Local)), 1 )
      if (not disable_output) _push( ReadNativeSingleton(_cur_t,_node_arg(-1)->(as Type)), 1 )
      if (not disable_output) _push( ReadObjectProperty(_cur_t,_node_arg(-2),_node_arg(-1)->(as Property)), 2 )
      if (not disable_output) _push( ReadProperty(_cur_t,_node_arg(-2),_node_arg(-1)->(as Property)), 2 )
      if (not disable_output) _push( ReadSingleton(_cur_t,_node_arg(-1)->(as Type)), 1 )
      if (not disable_output) _push( ReadThisObjectProperty(_cur_t,_node_arg(-1)->(as Property)), 1 )
      if (not disable_output) _push( ReadThisProperty(_cur_t,_node_arg(-1)->(as Property)), 1 )
      if (not disable_output) _push( ReturnResult(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( WriteGlobalProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( WriteLocal(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( WriteProperty(_cur_t,_node_arg(-3),_node_arg(-2)->(as Property),_node_arg(-1)), 3 )
      if (not disable_output) _push( WriteThisProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( WriteThisPropertyValue(_cur_t,_node_arg(-1)->(as Property)), 1 )
      if (not disable_output) _push( CallProcedure(_cur_t,_node_arg(-2)->(as Procedure),_node_arg(-1)->(as Args)), 2 )
      if (not disable_output) _push( CallDynamicNativeMethod(_cur_t,_node_arg(-3),_node_arg(-2)->(as Procedure),_node_arg(-1)->(as Args)), 3 )
      if (not disable_output) _push( CallThisDynamicNativeMethod(_cur_t,_node_arg(-2)->(as Procedure),_node_arg(-1)->(as Args)), 2 )
      if (not disable_output) _push( CallVirtualMethod(_cur_t,_node_arg(-4),_node_arg(-3)->(as Procedure),_int_arg(-2),_node_arg(-1)->(as Args)), 4 )
      if (not disable_output) _push( CallThisVirtualMethod(_cur_t,_node_arg(-3)->(as Procedure),_int_arg(-2),_node_arg(-1)->(as Args)), 3 )
      if (not disable_output) _push( CallStaticMethod(_cur_t,_node_arg(-3),_node_arg(-2)->(as Procedure),_node_arg(-1)->(as Args)), 3 )
      if (not disable_output) _push( CallThisStaticMethod(_cur_t,_node_arg(-2)->(as Procedure),_node_arg(-1)->(as Args)), 2 )
      if (not disable_output) _push( CallGlobalMethod(_cur_t,_node_arg(-2)->(as Procedure),_node_arg(-1)->(as Args)), 2 )
      if (not disable_output) _push( CallNativeMethod(_cur_t), 0 )
      if (not disable_output) _push( Compare(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
      if (not disable_output) _push( Conditional(_cur_t,_node_arg(-2),_node_arg(-1)->(as Statements)), 2 )
      if (not disable_output) _push( Convert(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertToByte(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertToCharacter(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertToInt32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertToInt(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertToInt64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertToLogical(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertToReal32(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertToReal(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( ConvertToReal64(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( CreateDefaultObject(_cur_t,_node_arg(-1)->(as Type)), 1 )
      if (not disable_output) _push( CreateDefaultString(_cur_t,_node_arg(-1)->(as Type)), 1 )
      if (not disable_output) _push( CreateDefaultList(_cur_t,_node_arg(-1)->(as Type)), 1 )
      if (not disable_output) _push( CreateDefaultTable(_cur_t,_node_arg(-1)->(as Type)), 1 )
      if (not disable_output) _push( CreateDefaultVariant(_cur_t,_node_arg(-1)->(as Type)), 1 )
      if (not disable_output) _push( DefaultConstructor(_cur_t,_node_arg(-1)->(as Type)), 1 )
      if (not disable_output) _push( CreateObject(_cur_t,_node_arg(-3)->(as Type),_node_arg(-2)->(as Procedure),_node_arg(-1)->(as Args)), 3 )
      if (not disable_output) _push( CreateCompound(_cur_t,_node_arg(-2)->(as Type),_node_arg(-1)->(as Args)), 2 )
      if (not disable_output) _push( CreateNativeObject(_cur_t,_node_arg(-1)->(as Type)), 1 )
      if (not disable_output) _push( DefaultArg(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( DummyInitialValue(_cur_t), 0 )
      if (not disable_output) _push( ExplicitCast(_cur_t,_node_arg(-2),_node_arg(-1)->(as Type)), 2 )
      if (not disable_output) _push( EnumValue(_cur_t,_node_arg(-2)->(as Type),_string_arg(-1)), 2 )
      if (not disable_output) _push( EnumValueDef(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( EmptyCompound(_cur_t,_node_arg(-1)->(as Type)), 1 )
      if (not disable_output) _push( Escape(_cur_t), 0 )
      if (not disable_output) _push( FunctionReturnValue(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( InlineAssignment(_cur_t,_node_arg(-2)->(as Local),_node_arg(-1)), 2 )
      if (not disable_output) _push( IntrospectionGetObjectProperty(_cur_t,_node_arg(-2)->(as Property),_node_arg(-1)), 2 )
      if (not disable_output) _push( Iterator(_cur_t,_node_arg(-4),_node_arg(-3),_node_arg(-2)->(as Statements),_node_arg(-1)), 4 )
      if (not disable_output) _push( Literal(_cur_t), 0 )
      if (not disable_output) _push( LiteralPrimitive(_cur_t), 0 )
      if (not disable_output) _push( LiteralInt(_cur_t,_cur_t.content,_string_to_Int("10")), 0 )
      if (not disable_output) _push( LiteralNullOptional(_cur_t,_node_arg(-1)->(as Type)), 1 )
      if (not disable_output) _push( LocalDeclaration(_cur_t,_node_arg(-1)->(as Local)), 1 )
      if (not disable_output) _push( Logicalized(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( PreDecrementLocal(_cur_t,_node_arg(-1)->(as Local)), 1 )
      if (not disable_output) _push( Procedure(_cur_t,_string_arg(-5),_node_arg(-4)->(as Parameters),_node_arg(-3)->(as Type),_node_arg(-2)->(as Attributes),null,_node_arg(-1)->(as Statements)), 5 )
      if (not disable_output) _push( PushStackTraceCutoff(_cur_t), 0 )
      if (not disable_output) _push( CreateRange(_cur_t,_node_arg(-3),_node_arg(-2),_node_arg(-1)), 3 )
      if (not disable_output) _push( ReturnOnException(_cur_t), 0 )
      if (not disable_output) _push( SetLocalToDefaultValue(_cur_t,_node_arg(-1)->(as Local)), 1 )
      if (not disable_output) _push( Stepper(_cur_t,_node_arg(-1)), 1 )
      if (not disable_output) _push( Switch(_cur_t,_node_arg(-3),_node_arg(-2)->(as WhichCases),_node_arg(-1)->(as Statements)), 3 )
      if (not disable_output) _push( TypeContext(_cur_t,_node_arg(-1)->(as Type)), 1 )
      if (not disable_output) _push( TypeIndex(_cur_t,_node_arg(-1)->(as Type)), 1 )
      if (not disable_output) _push( WideningCast(_cur_t,_node_arg(-2),_node_arg(-1)->(as Type)), 2 )
      if (not disable_output) _push( DecrementGlobalProperty(_cur_t,_node_arg(-1)->(as Property)), 1 )
      if (not disable_output) _push( DecrementLocal(_cur_t,_node_arg(-1)->(as Local)), 1 )
      if (not disable_output) _push( DecrementProperty(_cur_t,_node_arg(-2),_node_arg(-1)->(as Property)), 2 )
      if (not disable_output) _push( DecrementThisProperty(_cur_t,_node_arg(-1)->(as Property)), 1 )
      if (not disable_output) _push( IncrementGlobalProperty(_cur_t,_node_arg(-1)->(as Property)), 1 )
      if (not disable_output) _push( IncrementLocal(_cur_t,_node_arg(-1)->(as Local)), 1 )
      if (not disable_output) _push( IncrementProperty(_cur_t,_node_arg(-2),_node_arg(-1)->(as Property)), 2 )
      if (not disable_output) _push( IncrementThisProperty(_cur_t,_node_arg(-1)->(as Property)), 1 )
      _cur_t = _previous_cur_t
      return 0

endClass

class ParserPosition( position:Int, cmd_stack_count:Int, cur_t:Token ) [compound];
